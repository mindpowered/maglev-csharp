// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
public class ValueType : global::haxe.lang.Enum {
	
	protected ValueType(int index) : base(index) {
	}
	
	
	public static readonly global::ValueType TNull = new global::ValueType_TNull();
	
	public static readonly global::ValueType TInt = new global::ValueType_TInt();
	
	public static readonly global::ValueType TFloat = new global::ValueType_TFloat();
	
	public static readonly global::ValueType TBool = new global::ValueType_TBool();
	
	public static readonly global::ValueType TObject = new global::ValueType_TObject();
	
	public static readonly global::ValueType TFunction = new global::ValueType_TFunction();
	
	public static global::ValueType TClass(global::System.Type c) {
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		return new global::ValueType_TClass(c);
	}
	#line default
	
	public static global::ValueType TEnum(global::System.Type e) {
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		return new global::ValueType_TEnum(e);
	}
	#line default
	
	public static readonly global::ValueType TUnknown = new global::ValueType_TUnknown();
	
	protected static readonly string[] __hx_constructs = new string[]{"TNull", "TInt", "TFloat", "TBool", "TObject", "TFunction", "TClass", "TEnum", "TUnknown"};
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TNull : global::ValueType {
	
	public ValueType_TNull() : base(0) {
	}
	
	
	public override string getTag() {
		#line 34 "/opt/haxe/std/cs/_std/Type.hx"
		return "TNull";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TInt : global::ValueType {
	
	public ValueType_TInt() : base(1) {
	}
	
	
	public override string getTag() {
		#line 35 "/opt/haxe/std/cs/_std/Type.hx"
		return "TInt";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TFloat : global::ValueType {
	
	public ValueType_TFloat() : base(2) {
	}
	
	
	public override string getTag() {
		#line 36 "/opt/haxe/std/cs/_std/Type.hx"
		return "TFloat";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TBool : global::ValueType {
	
	public ValueType_TBool() : base(3) {
	}
	
	
	public override string getTag() {
		#line 37 "/opt/haxe/std/cs/_std/Type.hx"
		return "TBool";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TObject : global::ValueType {
	
	public ValueType_TObject() : base(4) {
	}
	
	
	public override string getTag() {
		#line 38 "/opt/haxe/std/cs/_std/Type.hx"
		return "TObject";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TFunction : global::ValueType {
	
	public ValueType_TFunction() : base(5) {
	}
	
	
	public override string getTag() {
		#line 39 "/opt/haxe/std/cs/_std/Type.hx"
		return "TFunction";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TClass : global::ValueType {
	
	public ValueType_TClass(global::System.Type c) : base(6) {
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		this.c = c;
	}
	#line default
	
	public override global::Array<object> getParams() {
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		return new global::Array<object>(new object[]{this.c});
	}
	#line default
	
	public override string getTag() {
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		return "TClass";
	}
	#line default
	
	public override int GetHashCode() {
		unchecked {
			#line 40 "/opt/haxe/std/cs/_std/Type.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(6, new object[]{this.c});
		}
		#line default
	}
	
	
	public override bool Equals(object other) {
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
			#line 40 "/opt/haxe/std/cs/_std/Type.hx"
			return true;
		}
		
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		global::ValueType_TClass en = ( other as global::ValueType_TClass );
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		if (( en == null )) {
			#line 40 "/opt/haxe/std/cs/_std/Type.hx"
			return false;
		}
		
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		if ( ! (global::Type.enumEq<object>(((object) (this.c) ), ((object) (en.c) ))) ) {
			#line 40 "/opt/haxe/std/cs/_std/Type.hx"
			return false;
		}
		
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		return true;
	}
	#line default
	
	public override string toString() {
		#line 40 "/opt/haxe/std/cs/_std/Type.hx"
		return global::haxe.lang.Enum.paramsToString("TClass", new object[]{this.c});
	}
	#line default
	
	public readonly global::System.Type c;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TEnum : global::ValueType {
	
	public ValueType_TEnum(global::System.Type e) : base(7) {
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		this.e = e;
	}
	#line default
	
	public override global::Array<object> getParams() {
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		return new global::Array<object>(new object[]{this.e});
	}
	#line default
	
	public override string getTag() {
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		return "TEnum";
	}
	#line default
	
	public override int GetHashCode() {
		unchecked {
			#line 41 "/opt/haxe/std/cs/_std/Type.hx"
			return global::haxe.lang.Enum.paramsGetHashCode(7, new object[]{this.e});
		}
		#line default
	}
	
	
	public override bool Equals(object other) {
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		if (global::System.Object.ReferenceEquals(((object) (this) ), ((object) (other) ))) {
			#line 41 "/opt/haxe/std/cs/_std/Type.hx"
			return true;
		}
		
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		global::ValueType_TEnum en = ( other as global::ValueType_TEnum );
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		if (( en == null )) {
			#line 41 "/opt/haxe/std/cs/_std/Type.hx"
			return false;
		}
		
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		if ( ! (global::Type.enumEq<object>(((object) (this.e) ), ((object) (en.e) ))) ) {
			#line 41 "/opt/haxe/std/cs/_std/Type.hx"
			return false;
		}
		
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		return true;
	}
	#line default
	
	public override string toString() {
		#line 41 "/opt/haxe/std/cs/_std/Type.hx"
		return global::haxe.lang.Enum.paramsToString("TEnum", new object[]{this.e});
	}
	#line default
	
	public readonly global::System.Type e;
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public sealed class ValueType_TUnknown : global::ValueType {
	
	public ValueType_TUnknown() : base(8) {
	}
	
	
	public override string getTag() {
		#line 42 "/opt/haxe/std/cs/_std/Type.hx"
		return "TUnknown";
	}
	#line default
	
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class Type : global::haxe.lang.HxObject {
	
	public Type(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Type() {
		#line 45 "/opt/haxe/std/cs/_std/Type.hx"
		global::Type.__hx_ctor__Type(this);
	}
	#line default
	
	protected static void __hx_ctor__Type(global::Type __hx_this) {
	}
	
	
	public static global::System.Type getClass<T>(T o) {
		#line 47 "/opt/haxe/std/cs/_std/Type.hx"
		if (( ( global::System.Object.ReferenceEquals(((object) (o) ), default(object)) || ( o is global::haxe.lang.DynamicObject ) ) || ( o is global::System.Type ) )) {
			#line 48 "/opt/haxe/std/cs/_std/Type.hx"
			return null;
		}
		
		#line 50 "/opt/haxe/std/cs/_std/Type.hx"
		return ((global::System.Type) (((object) (o) ).GetType()) );
	}
	#line default
	
	public static global::System.Type getEnum(object o) {
		#line 54 "/opt/haxe/std/cs/_std/Type.hx"
		if (( o is global::haxe.lang.Enum )) {
			#line 55 "/opt/haxe/std/cs/_std/Type.hx"
			return ((global::System.Type) (((object) (o) ).GetType().BaseType) );
		}
		else if (( o is global::System.Enum )) {
			#line 57 "/opt/haxe/std/cs/_std/Type.hx"
			return ((global::System.Type) (((object) (o) ).GetType()) );
		}
		
		#line 58 "/opt/haxe/std/cs/_std/Type.hx"
		return null;
	}
	#line default
	
	public static global::System.Type getSuperClass(global::System.Type c) {
		#line 62 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Type @base = ((global::System.Type) (c) ).BaseType;
		if (( ( global::System.Object.ReferenceEquals(((object) (@base) ), default(object)) || ( ( @base as global::System.Reflection.MemberInfo ).ToString() == "haxe.lang.HxObject" ) ) || ( ( @base as global::System.Reflection.MemberInfo ).ToString() == "System.Object" ) )) {
			#line 64 "/opt/haxe/std/cs/_std/Type.hx"
			return null;
		}
		
		#line 65 "/opt/haxe/std/cs/_std/Type.hx"
		return ((global::System.Type) (@base) );
	}
	#line default
	
	public static string getClassName(global::System.Type c) {
		unchecked {
			#line 69 "/opt/haxe/std/cs/_std/Type.hx"
			string ret = ( ((global::System.Type) (c) ) as global::System.Reflection.MemberInfo ).ToString();
			#line 75 "/opt/haxe/std/cs/_std/Type.hx"
			switch (ret) {
				case "System.Boolean":
				{
					#line 80 "/opt/haxe/std/cs/_std/Type.hx"
					return "Bool";
				}
				
				
				case "System.Double":
				{
					#line 78 "/opt/haxe/std/cs/_std/Type.hx"
					return "Float";
				}
				
				
				case "System.Int32":
				{
					#line 77 "/opt/haxe/std/cs/_std/Type.hx"
					return "Int";
				}
				
				
				case "System.Object":
				{
					#line 81 "/opt/haxe/std/cs/_std/Type.hx"
					return "Dynamic";
				}
				
				
				case "System.String":
				{
					#line 79 "/opt/haxe/std/cs/_std/Type.hx"
					return "String";
				}
				
				
				case "System.Type":
				{
					#line 82 "/opt/haxe/std/cs/_std/Type.hx"
					return "Class";
				}
				
				
				default:
				{
					#line 83 "/opt/haxe/std/cs/_std/Type.hx"
					return ((string) ((((global::System.String) (((object) (ret) )) )).Split(((char[]) (new char[]{((char) (96) )}) ))[0]) );
				}
				
			}
			
		}
		#line default
	}
	
	
	public static string getEnumName(global::System.Type e) {
		#line 88 "/opt/haxe/std/cs/_std/Type.hx"
		string ret = ( ((global::System.Type) (e) ) as global::System.Reflection.MemberInfo ).ToString();
		#line 93 "/opt/haxe/std/cs/_std/Type.hx"
		return ret;
	}
	#line default
	
	public static global::System.Type resolveClass(string name) {
		unchecked {
			#line 101 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Type t = global::System.Type.GetType(((string) (name) ));
			#line 103 "/opt/haxe/std/cs/_std/Type.hx"
			if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
				#line 104 "/opt/haxe/std/cs/_std/Type.hx"
				global::System.Collections.IEnumerator all = ( global::System.AppDomain.CurrentDomain.GetAssemblies() as global::System.Array ).GetEnumerator();
				while (all.MoveNext()) {
					#line 106 "/opt/haxe/std/cs/_std/Type.hx"
					global::System.Reflection.Assembly t2 = ((global::System.Reflection.Assembly) (all.Current) );
					t = t2.GetType(((string) (name) ));
					#line 108 "/opt/haxe/std/cs/_std/Type.hx"
					if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
						#line 109 "/opt/haxe/std/cs/_std/Type.hx"
						break;
					}
					
				}
				
			}
			
			#line 113 "/opt/haxe/std/cs/_std/Type.hx"
			if (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) {
				#line 114 "/opt/haxe/std/cs/_std/Type.hx"
				switch (name) {
					case "Bool":
					{
						#line 126 "/opt/haxe/std/cs/_std/Type.hx"
						return ((global::System.Type) (typeof(bool)) );
					}
					
					
					case "Class":
					{
						#line 120 "/opt/haxe/std/cs/_std/Type.hx"
						return ((global::System.Type) (typeof(global::System.Type)) );
					}
					
					
					case "Dynamic":
					{
						#line 122 "/opt/haxe/std/cs/_std/Type.hx"
						return ((global::System.Type) (typeof(object)) );
					}
					
					
					case "Float":
					{
						#line 118 "/opt/haxe/std/cs/_std/Type.hx"
						return ((global::System.Type) (typeof(double)) );
					}
					
					
					case "Int":
					{
						#line 116 "/opt/haxe/std/cs/_std/Type.hx"
						return ((global::System.Type) (typeof(int)) );
					}
					
					
					case "String":
					{
						#line 124 "/opt/haxe/std/cs/_std/Type.hx"
						return ((global::System.Type) (typeof(string)) );
					}
					
					
					default:
					{
						#line 128 "/opt/haxe/std/cs/_std/Type.hx"
						return null;
					}
					
				}
				
			}
			else if (( t.IsInterface && (((global::System.Type) (typeof(global::haxe.lang.IGenericObject)) )).IsAssignableFrom(((global::System.Type) (t) )) )) {
				#line 133 "/opt/haxe/std/cs/_std/Type.hx"
				{
					#line 133 "/opt/haxe/std/cs/_std/Type.hx"
					object[] _g_arr = ( t as global::System.Reflection.MemberInfo ).GetCustomAttributes(((bool) (true) ));
					#line 133 "/opt/haxe/std/cs/_std/Type.hx"
					uint _g_idx = ((uint) (0) );
					#line 133 "/opt/haxe/std/cs/_std/Type.hx"
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						#line 133 "/opt/haxe/std/cs/_std/Type.hx"
						_g_idx += ((uint) (1) );
						#line 133 "/opt/haxe/std/cs/_std/Type.hx"
						object attr = ((object) (_g_arr[((int) (((uint) (( _g_idx - 1 )) )) )]) );
						global::haxe.lang.GenericInterface g = ( ((object) (attr) ) as global::haxe.lang.GenericInterface );
						#line 135 "/opt/haxe/std/cs/_std/Type.hx"
						if (( g != null )) {
							#line 136 "/opt/haxe/std/cs/_std/Type.hx"
							return ((global::System.Type) (g.generic) );
						}
						
					}
					
				}
				
				#line 139 "/opt/haxe/std/cs/_std/Type.hx"
				return ((global::System.Type) (t) );
			}
			else {
				#line 142 "/opt/haxe/std/cs/_std/Type.hx"
				return ((global::System.Type) (t) );
			}
			
		}
		#line default
	}
	
	
	public static global::System.Type resolveEnum(string name) {
		#line 147 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Type t = global::Type.resolveClass(name);
		if ((  ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object)))  && (( t.BaseType.Equals(((global::System.Type) (typeof(global::System.Enum)) )) || ((global::System.Type) (typeof(global::haxe.lang.Enum)) ).IsAssignableFrom(((global::System.Type) (t) )) )) )) {
			#line 150 "/opt/haxe/std/cs/_std/Type.hx"
			return ((global::System.Type) (t) );
		}
		
		#line 151 "/opt/haxe/std/cs/_std/Type.hx"
		return null;
	}
	#line default
	
	public static T createInstance<T>(global::System.Type cl, global::Array args) {
		#line 155 "/opt/haxe/std/cs/_std/Type.hx"
		if (global::System.Object.ReferenceEquals(((object) (cl) ), ((object) (typeof(string)) ))) {
			#line 156 "/opt/haxe/std/cs/_std/Type.hx"
			return global::haxe.lang.Runtime.genericCast<T>(args[0]);
		}
		
		#line 157 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Type t = ((global::System.Type) (cl) );
		if (t.IsInterface) {
			#line 160 "/opt/haxe/std/cs/_std/Type.hx"
			t = global::Type.resolveClass(global::Type.getClassName(cl));
		}
		
		#line 162 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Reflection.ConstructorInfo[] ctors = t.GetConstructors();
		int tmp = ( ctors as global::System.Array ).Length;
		object[] ret = new object[((int) (global::haxe.lang.Runtime.getField_f(args, "length", 520590566, true)) )];
		global::cs.Lib.p_nativeArray<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (args) ))) ), ((global::System.Array) (ret) ));
		return global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.callMethod(null, ((global::System.Reflection.MethodBase[]) (ctors) ), tmp, ret));
	}
	#line default
	
	protected static readonly object[] __createEmptyInstance_EMPTY_ARGS = new object[]{((object) (global::haxe.lang.EmptyObject.EMPTY) )};
	
	public static T createEmptyInstance<T>(global::System.Type cl) {
		#line 170 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Type t = ((global::System.Type) (cl) );
		#line 172 "/opt/haxe/std/cs/_std/Type.hx"
		if (global::System.Object.ReferenceEquals(((object) (t) ), ((object) (typeof(string)) ))) {
			#line 176 "/opt/haxe/std/cs/_std/Type.hx"
			return (T)(object)"";
		}
		
		#line 179 "/opt/haxe/std/cs/_std/Type.hx"
		object res = null;
		#line 179 "/opt/haxe/std/cs/_std/Type.hx"
		try {
			#line 179 "/opt/haxe/std/cs/_std/Type.hx"
			res = global::System.Activator.CreateInstance(((global::System.Type) (t) ), ((object[]) (global::Type.__createEmptyInstance_EMPTY_ARGS) ));
		}
		catch (global::System.MissingMemberException _){
			#line 179 "/opt/haxe/std/cs/_std/Type.hx"
			res = global::System.Activator.CreateInstance(((global::System.Type) (t) ));
		}
		
		
		#line 185 "/opt/haxe/std/cs/_std/Type.hx"
		return (T)res;
	}
	#line default
	
	public static T createEnum<T>(global::System.Type e, string constr, global::Array @params) {
		#line 190 "/opt/haxe/std/cs/_std/Type.hx"
		if (( ( @params == null ) || ( ((int) (global::haxe.lang.Runtime.getField_f(@params, "length", 520590566, true)) ) == 0 ) )) {
			#line 191 "/opt/haxe/std/cs/_std/Type.hx"
			T ret = global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.slowGetField(e, constr, true));
			if (( ((object) (ret) ) is global::haxe.lang.Function )) {
				#line 193 "/opt/haxe/std/cs/_std/Type.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Constructor ", constr), " needs parameters"))) );
			}
			
			#line 194 "/opt/haxe/std/cs/_std/Type.hx"
			return ret;
		}
		else {
			#line 196 "/opt/haxe/std/cs/_std/Type.hx"
			object[] ret1 = new object[((int) (global::haxe.lang.Runtime.getField_f(@params, "length", 520590566, true)) )];
			#line 196 "/opt/haxe/std/cs/_std/Type.hx"
			global::cs.Lib.p_nativeArray<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@params) ))) ), ((global::System.Array) (ret1) ));
			#line 196 "/opt/haxe/std/cs/_std/Type.hx"
			return global::haxe.lang.Runtime.genericCast<T>(global::haxe.lang.Runtime.slowCallField(e, constr, ret1));
		}
		
	}
	#line default
	
	public static T createEnumIndex<T>(global::System.Type e, int index, global::Array @params) {
		#line 201 "/opt/haxe/std/cs/_std/Type.hx"
		global::Array<string> constr = global::Type.getEnumConstructs(e);
		return global::Type.createEnum<T>(((global::System.Type) (e) ), ((string) (constr[index]) ), ((global::Array) (@params) ));
	}
	#line default
	
	public static global::Array<string> getInstanceFields(global::System.Type c) {
		unchecked {
			#line 206 "/opt/haxe/std/cs/_std/Type.hx"
			if (global::haxe.lang.Runtime.refEq(c, typeof(string))) {
				#line 207 "/opt/haxe/std/cs/_std/Type.hx"
				return global::haxe.lang.StringRefl.fields;
			}
			
			#line 209 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Type c1 = ((global::System.Type) (c) );
			global::Array<string> ret = new global::Array<string>(new string[]{});
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(global::System.Reflection.BindingFlags.Public, true);
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Reflection.BindingFlags this1 = ( ( ! (initial.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial).@value) );
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial1 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Instance) ) ), true);
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Reflection.BindingFlags this2 = ( ( ! (initial1.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial1).@value) );
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial2 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this2) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.FlattenHierarchy) ) ), true);
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Reflection.BindingFlags this3 = ( ( ! (initial2.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial2).@value) );
			#line 211 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Reflection.MemberInfo[] mis = c1.GetMembers(((global::System.Reflection.BindingFlags) (this3) ));
			{
				#line 212 "/opt/haxe/std/cs/_std/Type.hx"
				int _g = 0;
				#line 212 "/opt/haxe/std/cs/_std/Type.hx"
				int _g1 = ( mis as global::System.Array ).Length;
				#line 212 "/opt/haxe/std/cs/_std/Type.hx"
				while (( _g < _g1 )) {
					#line 212 "/opt/haxe/std/cs/_std/Type.hx"
					int i = _g++;
					global::System.Reflection.MemberInfo i1 = ((global::System.Reflection.MemberInfo) (mis[i]) );
					#line 214 "/opt/haxe/std/cs/_std/Type.hx"
					if (( i1 is global::System.Reflection.PropertyInfo )) {
						#line 215 "/opt/haxe/std/cs/_std/Type.hx"
						continue;
					}
					
					#line 216 "/opt/haxe/std/cs/_std/Type.hx"
					string n = i1.Name;
					if ((  ! (n.StartsWith("__hx_"))  && ( (( (( ((uint) (0) ) < n.Length )) ? (((int) (n[0]) )) : (-1) )) != 46 ) )) {
						#line 218 "/opt/haxe/std/cs/_std/Type.hx"
						switch (n) {
							case "Equals":
							case "GetHashCode":
							case "GetType":
							case "ToString":
							{
								#line 219 "/opt/haxe/std/cs/_std/Type.hx"
								break;
							}
							
							
							default:
							{
								#line 221 "/opt/haxe/std/cs/_std/Type.hx"
								ret.push(n);
								#line 221 "/opt/haxe/std/cs/_std/Type.hx"
								break;
							}
							
						}
						
					}
					
				}
				
			}
			
			#line 225 "/opt/haxe/std/cs/_std/Type.hx"
			return ret;
		}
		#line default
	}
	
	
	public static global::Array<string> getClassFields(global::System.Type c) {
		#line 229 "/opt/haxe/std/cs/_std/Type.hx"
		if (global::System.Object.ReferenceEquals(((object) (c) ), ((object) (typeof(string)) ))) {
			#line 230 "/opt/haxe/std/cs/_std/Type.hx"
			return new global::Array<string>(new string[]{"fromCharCode"});
		}
		
		#line 233 "/opt/haxe/std/cs/_std/Type.hx"
		global::Array<string> ret = new global::Array<string>(new string[]{});
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(global::System.Reflection.BindingFlags.Public, true);
		global::System.Reflection.BindingFlags this1 = ( ( ! (initial.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial).@value) );
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial1 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Static) ) ), true);
		global::System.Reflection.BindingFlags this2 = ( ( ! (initial1.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial1).@value) );
		global::System.Reflection.MemberInfo[] infos = ((global::System.Type) (c) ).GetMembers(((global::System.Reflection.BindingFlags) (this2) ));
		#line 235 "/opt/haxe/std/cs/_std/Type.hx"
		{
			#line 235 "/opt/haxe/std/cs/_std/Type.hx"
			int _g = 0;
			#line 235 "/opt/haxe/std/cs/_std/Type.hx"
			int _g1 = ( infos as global::System.Array ).Length;
			#line 235 "/opt/haxe/std/cs/_std/Type.hx"
			while (( _g < _g1 )) {
				#line 235 "/opt/haxe/std/cs/_std/Type.hx"
				int i = _g++;
				string name = ((global::System.Reflection.MemberInfo) (infos[i]) ).Name;
				#line 237 "/opt/haxe/std/cs/_std/Type.hx"
				if ( ! (name.StartsWith("__hx_")) ) {
					#line 238 "/opt/haxe/std/cs/_std/Type.hx"
					ret.push(name);
				}
				
			}
			
		}
		
		#line 241 "/opt/haxe/std/cs/_std/Type.hx"
		return ret;
	}
	#line default
	
	public static global::Array<string> getEnumConstructs(global::System.Type e) {
		#line 245 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Type t = ( ((object) (e) ) as global::System.Type );
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(global::System.Reflection.BindingFlags.Static, true);
		global::System.Reflection.BindingFlags this1 = ( ( ! (initial.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial).@value) );
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial1 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.NonPublic) ) ), true);
		global::System.Reflection.BindingFlags this2 = ( ( ! (initial1.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial1).@value) );
		global::System.Reflection.FieldInfo f = t.GetField(((string) ("__hx_constructs") ), ((global::System.Reflection.BindingFlags) (this2) ));
		#line 247 "/opt/haxe/std/cs/_std/Type.hx"
		if (( f != null )) {
			#line 248 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Array values = ((global::System.Array) (f.GetValue(default(object))) );
			string[] copy = new string[values.Length];
			#line 250 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Array.Copy(((global::System.Array) (values) ), ((global::System.Array) (copy) ), ((int) (values.Length) ));
			return new global::Array<string>(((string[]) (copy) ));
		}
		else {
			#line 253 "/opt/haxe/std/cs/_std/Type.hx"
			return new global::Array<string>(((string[]) (global::System.Enum.GetNames(((global::System.Type) (t) ))) ));
		}
		
	}
	#line default
	
	public static global::ValueType @typeof(object v) {
		#line 257 "/opt/haxe/std/cs/_std/Type.hx"
		if (( v == null )) {
			#line 258 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TNull;
		}
		
		#line 260 "/opt/haxe/std/cs/_std/Type.hx"
		global::System.Type t = ( v as global::System.Type );
		if ( ! (global::System.Object.ReferenceEquals(((object) (t) ), default(object))) ) {
			#line 263 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TObject;
		}
		
		#line 266 "/opt/haxe/std/cs/_std/Type.hx"
		t = ((global::System.Type) (v.GetType()) );
		if (t.IsEnum) {
			#line 268 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TEnum(((global::System.Type) (t) ));
		}
		
		#line 269 "/opt/haxe/std/cs/_std/Type.hx"
		if (( v is global::haxe.lang.Enum )) {
			#line 270 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TEnum(((global::System.Type) (t.BaseType) ));
		}
		
		#line 271 "/opt/haxe/std/cs/_std/Type.hx"
		if (t.IsValueType) {
			#line 272 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.IConvertible vc = ( ((object) (v) ) as global::System.IConvertible );
			if (( vc != null )) {
				#line 274 "/opt/haxe/std/cs/_std/Type.hx"
				switch (vc.GetTypeCode()) {
					case global::System.TypeCode.Boolean:
					{
						#line 276 "/opt/haxe/std/cs/_std/Type.hx"
						return global::ValueType.TBool;
					}
					
					
					case global::System.TypeCode.Int32:
					{
						#line 284 "/opt/haxe/std/cs/_std/Type.hx"
						return global::ValueType.TInt;
					}
					
					
					case global::System.TypeCode.Double:
					{
						#line 278 "/opt/haxe/std/cs/_std/Type.hx"
						double d = vc.ToDouble(default(global::System.IFormatProvider));
						if (( ( ( d >= global::System.Int32.MinValue ) && ( d <= global::System.Int32.MaxValue ) ) && ( d == vc.ToInt32(default(global::System.IFormatProvider)) ) )) {
							#line 280 "/opt/haxe/std/cs/_std/Type.hx"
							return global::ValueType.TInt;
						}
						else {
							#line 282 "/opt/haxe/std/cs/_std/Type.hx"
							return global::ValueType.TFloat;
						}
						
					}
					
					
					default:
					{
						#line 286 "/opt/haxe/std/cs/_std/Type.hx"
						return global::ValueType.TClass(((global::System.Type) (t) ));
					}
					
				}
				
			}
			else {
				#line 289 "/opt/haxe/std/cs/_std/Type.hx"
				return global::ValueType.TClass(((global::System.Type) (t) ));
			}
			
		}
		
		#line 293 "/opt/haxe/std/cs/_std/Type.hx"
		if (( v is global::haxe.lang.IHxObject )) {
			#line 294 "/opt/haxe/std/cs/_std/Type.hx"
			if (( v is global::haxe.lang.DynamicObject )) {
				#line 295 "/opt/haxe/std/cs/_std/Type.hx"
				return global::ValueType.TObject;
			}
			
			#line 296 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TClass(((global::System.Type) (t) ));
		}
		else if (( v is global::haxe.lang.Function )) {
			#line 298 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TFunction;
		}
		else {
			#line 300 "/opt/haxe/std/cs/_std/Type.hx"
			return global::ValueType.TClass(((global::System.Type) (t) ));
		}
		
	}
	#line default
	
	public static bool enumEq<T>(T a, T b) {
		#line 306 "/opt/haxe/std/cs/_std/Type.hx"
		if (global::haxe.lang.Runtime.eq(a, default(T))) {
			#line 307 "/opt/haxe/std/cs/_std/Type.hx"
			return global::haxe.lang.Runtime.eq(b, default(T));
		}
		else if (global::haxe.lang.Runtime.eq(b, default(T))) {
			#line 309 "/opt/haxe/std/cs/_std/Type.hx"
			return false;
		}
		else {
			#line 311 "/opt/haxe/std/cs/_std/Type.hx"
			return a.Equals(b);
		}
		
	}
	#line default
	
	public static string enumConstructor(object e) {
		#line 315 "/opt/haxe/std/cs/_std/Type.hx"
		if (( e is global::System.Enum )) {
			#line 315 "/opt/haxe/std/cs/_std/Type.hx"
			return ( (((global::System.Enum) (e) )) as global::System.ValueType ).ToString();
		}
		else {
			#line 315 "/opt/haxe/std/cs/_std/Type.hx"
			return (((global::haxe.lang.Enum) (e) )).getTag();
		}
		
	}
	#line default
	
	public static global::Array enumParameters(object e) {
		#line 319 "/opt/haxe/std/cs/_std/Type.hx"
		if (( e is global::System.Enum )) {
			#line 319 "/opt/haxe/std/cs/_std/Type.hx"
			return new global::Array<object>(new object[]{});
		}
		else {
			#line 319 "/opt/haxe/std/cs/_std/Type.hx"
			return (((global::haxe.lang.Enum) (e) )).getParams();
		}
		
	}
	#line default
	
	public static int enumIndex(object e) {
		#line 325 "/opt/haxe/std/cs/_std/Type.hx"
		if (( e is global::System.Enum )) {
			#line 326 "/opt/haxe/std/cs/_std/Type.hx"
			global::System.Array values = global::System.Enum.GetValues(((global::System.Type) (((object) (e) ).GetType()) ));
			return global::System.Array.IndexOf(((global::System.Array) (values) ), ((object) (e) ));
		}
		else {
			#line 329 "/opt/haxe/std/cs/_std/Type.hx"
			return (((global::haxe.lang.Enum) (e) ))._hx_index;
		}
		
	}
	#line default
	
	public static global::Array<T> allEnums<T>(global::System.Type e) {
		#line 334 "/opt/haxe/std/cs/_std/Type.hx"
		global::Array<string> ctors = global::Type.getEnumConstructs(e);
		global::Array<T> ret = new global::Array<T>(new T[]{});
		#line 336 "/opt/haxe/std/cs/_std/Type.hx"
		{
			#line 336 "/opt/haxe/std/cs/_std/Type.hx"
			int _g = 0;
			#line 336 "/opt/haxe/std/cs/_std/Type.hx"
			while (( _g < ctors.length )) {
				#line 336 "/opt/haxe/std/cs/_std/Type.hx"
				string ctor = ctors[_g];
				#line 336 "/opt/haxe/std/cs/_std/Type.hx"
				 ++ _g;
				T v = global::haxe.lang.Runtime.genericCast<T>(global::Reflect.field(e, ctor));
				#line 338 "/opt/haxe/std/cs/_std/Type.hx"
				if (global::Std.isOfType(v, e)) {
					#line 339 "/opt/haxe/std/cs/_std/Type.hx"
					ret.push(v);
				}
				
			}
			
		}
		
		#line 342 "/opt/haxe/std/cs/_std/Type.hx"
		return ret;
	}
	#line default
	
}


