// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.iterators {
	public class MapKeyValueIterator<K, V> : global::haxe.lang.HxObject, global::haxe.iterators.MapKeyValueIterator {
		
		public MapKeyValueIterator(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public MapKeyValueIterator(global::haxe.IMap<K, V> map) {
			#line 35 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			global::haxe.iterators.MapKeyValueIterator<object, object>.__hx_ctor_haxe_iterators_MapKeyValueIterator<K, V>(((global::haxe.iterators.MapKeyValueIterator<K, V>) (this) ), ((global::haxe.IMap<K, V>) (map) ));
		}
		#line default
		
		protected static void __hx_ctor_haxe_iterators_MapKeyValueIterator<K_c, V_c>(global::haxe.iterators.MapKeyValueIterator<K_c, V_c> __hx_this, global::haxe.IMap<K_c, V_c> map) {
			#line 36 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			__hx_this.map = map;
			__hx_this.keys = map.keys();
		}
		#line default
		
		public static object __hx_cast<K_c_c, V_c_c>(global::haxe.iterators.MapKeyValueIterator me) {
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			return ( (( me != null )) ? (me.haxe_iterators_MapKeyValueIterator_cast<K_c_c, V_c_c>()) : default(object) );
		}
		#line default
		
		public virtual object haxe_iterators_MapKeyValueIterator_cast<K_c, V_c>() {
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			if (( global::haxe.lang.Runtime.eq(typeof(K), typeof(K_c)) && global::haxe.lang.Runtime.eq(typeof(V), typeof(V_c)) )) {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				return this;
			}
			
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			global::haxe.iterators.MapKeyValueIterator<K_c, V_c> new_me = new global::haxe.iterators.MapKeyValueIterator<K_c, V_c>(((global::haxe.lang.EmptyObject) (global::haxe.lang.EmptyObject.EMPTY) ));
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			global::Array<string> fields = global::Reflect.fields(this);
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			int i = 0;
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			while (( i < fields.length )) {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				string field = fields[i++];
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				global::Reflect.setField(new_me, field, global::Reflect.field(this, field));
			}
			
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			return new_me;
		}
		#line default
		
		public global::haxe.IMap<K, V> map;
		
		public object keys;
		
		public bool hasNext() {
			#line 44 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			return global::haxe.lang.Runtime.toBool(global::haxe.lang.Runtime.callField(this.keys, "hasNext", 407283053, null));
		}
		#line default
		
		public object next() {
			#line 51 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			K key = global::haxe.lang.Runtime.genericCast<K>(global::haxe.lang.Runtime.callField(this.keys, "next", 1224901875, null));
			{
				#line 52 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				global::haxe.lang.Null<V> __temp_odecl1 = this.map.@get(key);
				#line 52 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				return new global::haxe.lang.DynamicObject(new int[]{5343647, 834174833}, new object[]{key, (__temp_odecl1).toDynamic()}, new int[]{}, new double[]{});
			}
			
		}
		#line default
		
		public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
			unchecked {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				switch (hash) {
					case 1191633396:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						this.keys = ((object) (@value) );
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return @value;
					}
					
					
					default:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return base.__hx_setField_f(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				switch (hash) {
					case 1191633396:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						this.keys = ((object) (@value) );
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return @value;
					}
					
					
					case 5442204:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						this.map = ((global::haxe.IMap<K, V>) (global::haxe.IMap__Statics_.__hx_cast<K, V>(((global::haxe.IMap) (@value) ))) );
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return @value;
					}
					
					
					default:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				switch (hash) {
					case 1224901875:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "next", 1224901875)) );
					}
					
					
					case 407283053:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "hasNext", 407283053)) );
					}
					
					
					case 1191633396:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return this.keys;
					}
					
					
					case 5442204:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return this.map;
					}
					
					
					default:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
			unchecked {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				switch (hash) {
					case 1191633396:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return ((double) (global::haxe.lang.Runtime.toDouble(this.keys)) );
					}
					
					
					default:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
				switch (hash) {
					case 1224901875:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return this.next();
					}
					
					
					case 407283053:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return this.hasNext();
					}
					
					
					default:
					{
						#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			baseArr.push("keys");
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			baseArr.push("map");
			#line 31 "/opt/haxe/std/haxe/iterators/MapKeyValueIterator.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.iterators {
	[global::haxe.lang.GenericInterface(typeof(global::haxe.iterators.MapKeyValueIterator<object, object>))]
	public interface MapKeyValueIterator : global::haxe.lang.IHxObject, global::haxe.lang.IGenericObject {
		
		object haxe_iterators_MapKeyValueIterator_cast<K_c, V_c>();
		
		bool hasNext();
		
		object next();
		
	}
}


