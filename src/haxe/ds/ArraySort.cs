// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.ds {
	public class ArraySort : global::haxe.lang.HxObject {
		
		public ArraySort(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ArraySort() {
			#line 30 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			global::haxe.ds.ArraySort.__hx_ctor_haxe_ds_ArraySort(this);
		}
		#line default
		
		protected static void __hx_ctor_haxe_ds_ArraySort(global::haxe.ds.ArraySort __hx_this) {
		}
		
		
		public static void sort<T>(global::Array<T> a, global::haxe.lang.Function cmp) {
			#line 43 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			global::haxe.ds.ArraySort.rec<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (0) ), ((int) (a.length) ));
		}
		#line default
		
		public static void rec<T>(global::Array<T> a, global::haxe.lang.Function cmp, int @from, int to) {
			unchecked {
				#line 47 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int middle = ( ( @from + to ) >> 1 );
				if (( ( to - @from ) < 12 )) {
					#line 49 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					if (( to <= @from )) {
						#line 50 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						return;
					}
					
					#line 51 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					{
						#line 51 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						int _g = ( @from + 1 );
						#line 51 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						int _g1 = to;
						#line 51 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						while (( _g < _g1 )) {
							#line 51 "/opt/haxe/std/haxe/ds/ArraySort.hx"
							int i = _g++;
							int j = i;
							#line 53 "/opt/haxe/std/haxe/ds/ArraySort.hx"
							while (( j > @from )) {
								#line 54 "/opt/haxe/std/haxe/ds/ArraySort.hx"
								if (( ((int) (cmp.__hx_invoke2_f(default(double), a[j], default(double), a[( j - 1 )])) ) < 0 )) {
									#line 55 "/opt/haxe/std/haxe/ds/ArraySort.hx"
									global::haxe.ds.ArraySort.swap<T>(((global::Array<T>) (a) ), ((int) (( j - 1 )) ), ((int) (j) ));
								}
								else {
									#line 57 "/opt/haxe/std/haxe/ds/ArraySort.hx"
									break;
								}
								
								#line 58 "/opt/haxe/std/haxe/ds/ArraySort.hx"
								 -- j;
							}
							
						}
						
					}
					
					#line 61 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					return;
				}
				
				#line 63 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				global::haxe.ds.ArraySort.rec<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (@from) ), ((int) (middle) ));
				global::haxe.ds.ArraySort.rec<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (middle) ), ((int) (to) ));
				#line 65 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				global::haxe.ds.ArraySort.doMerge<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (@from) ), ((int) (middle) ), ((int) (to) ), ((int) (( middle - @from )) ), ((int) (( to - middle )) ));
			}
			#line default
		}
		
		
		public static void doMerge<T>(global::Array<T> a, global::haxe.lang.Function cmp, int @from, int pivot, int to, int len1, int len2) {
			unchecked {
				#line 69 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int first_cut = default(int);
				#line 69 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int second_cut = default(int);
				#line 69 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int len11 = default(int);
				#line 69 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int len22 = default(int);
				if (( ( len1 == 0 ) || ( len2 == 0 ) )) {
					#line 71 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					return;
				}
				
				#line 72 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				if (( ( len1 + len2 ) == 2 )) {
					#line 73 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					if (( ((int) (cmp.__hx_invoke2_f(default(double), a[pivot], default(double), a[@from])) ) < 0 )) {
						#line 74 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						global::haxe.ds.ArraySort.swap<T>(((global::Array<T>) (a) ), ((int) (pivot) ), ((int) (@from) ));
					}
					
					#line 75 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					return;
				}
				
				#line 77 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				if (( len1 > len2 )) {
					#line 78 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					len11 = ( len1 >> 1 );
					first_cut = ( @from + len11 );
					#line 80 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					second_cut = global::haxe.ds.ArraySort.lower<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (pivot) ), ((int) (to) ), ((int) (first_cut) ));
					len22 = ( second_cut - pivot );
				}
				else {
					#line 83 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					len22 = ( len2 >> 1 );
					second_cut = ( pivot + len22 );
					#line 85 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					first_cut = global::haxe.ds.ArraySort.upper<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (@from) ), ((int) (pivot) ), ((int) (second_cut) ));
					len11 = ( first_cut - @from );
				}
				
				#line 88 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				global::haxe.ds.ArraySort.rotate<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (first_cut) ), ((int) (pivot) ), ((int) (second_cut) ));
				#line 69 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int new_mid = ( first_cut + len22 );
				#line 90 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				global::haxe.ds.ArraySort.doMerge<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (@from) ), ((int) (first_cut) ), ((int) (new_mid) ), ((int) (len11) ), ((int) (len22) ));
				global::haxe.ds.ArraySort.doMerge<T>(((global::Array<T>) (a) ), ((global::haxe.lang.Function) (cmp) ), ((int) (new_mid) ), ((int) (second_cut) ), ((int) (to) ), ((int) (( len1 - len11 )) ), ((int) (( len2 - len22 )) ));
			}
			#line default
		}
		
		
		public static void rotate<T>(global::Array<T> a, global::haxe.lang.Function cmp, int @from, int mid, int to) {
			#line 96 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			if (( ( @from == mid ) || ( mid == to ) )) {
				#line 97 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				return;
			}
			
			#line 95 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			int n = global::haxe.ds.ArraySort.gcd(( to - @from ), ( mid - @from ));
			#line 99 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			while (( n-- != 0 )) {
				#line 100 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				T val = a[( @from + n )];
				int shift = ( mid - @from );
				#line 102 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int p1 = ( @from + n );
				#line 102 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int p2 = ( ( @from + n ) + shift );
				while (( p2 != ( @from + n ) )) {
					#line 104 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					a[p1] = a[p2];
					p1 = p2;
					#line 106 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					if (( ( to - p2 ) > shift )) {
						#line 107 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						p2 += shift;
					}
					else {
						#line 109 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						p2 = ( @from + (( shift - (( to - p2 )) )) );
					}
					
				}
				
				#line 111 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				a[p1] = val;
			}
			
		}
		#line default
		
		public static int gcd(int m, int n) {
			#line 116 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			while (( n != 0 )) {
				#line 117 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int t = ( m % n );
				m = n;
				#line 119 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				n = t;
			}
			
			#line 121 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			return m;
		}
		#line default
		
		public static int upper<T>(global::Array<T> a, global::haxe.lang.Function cmp, int @from, int to, int val) {
			unchecked {
				#line 125 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int len = ( to - @from );
				#line 125 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int half = default(int);
				#line 125 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int mid = default(int);
				while (( len > 0 )) {
					#line 127 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					half = ( len >> 1 );
					mid = ( @from + half );
					#line 129 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					if (( ((int) (cmp.__hx_invoke2_f(default(double), a[val], default(double), a[mid])) ) < 0 )) {
						#line 130 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						len = half;
					}
					else {
						#line 132 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						@from = ( mid + 1 );
						len = ( ( len - half ) - 1 );
					}
					
				}
				
				#line 136 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				return @from;
			}
			#line default
		}
		
		
		public static int lower<T>(global::Array<T> a, global::haxe.lang.Function cmp, int @from, int to, int val) {
			unchecked {
				#line 140 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int len = ( to - @from );
				#line 140 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int half = default(int);
				#line 140 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				int mid = default(int);
				while (( len > 0 )) {
					#line 142 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					half = ( len >> 1 );
					mid = ( @from + half );
					#line 144 "/opt/haxe/std/haxe/ds/ArraySort.hx"
					if (( ((int) (cmp.__hx_invoke2_f(default(double), a[mid], default(double), a[val])) ) < 0 )) {
						#line 145 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						@from = ( mid + 1 );
						len = ( ( len - half ) - 1 );
					}
					else {
						#line 148 "/opt/haxe/std/haxe/ds/ArraySort.hx"
						len = half;
					}
					
				}
				
				#line 150 "/opt/haxe/std/haxe/ds/ArraySort.hx"
				return @from;
			}
			#line default
		}
		
		
		public static void swap<T>(global::Array<T> a, int i, int j) {
			#line 154 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			T tmp = a[i];
			a[i] = a[j];
			#line 156 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			a[j] = tmp;
		}
		#line default
		
		public static int compare<T>(global::Array<T> a, global::haxe.lang.Function cmp, int i, int j) {
			#line 160 "/opt/haxe/std/haxe/ds/ArraySort.hx"
			return ((int) (cmp.__hx_invoke2_f(default(double), a[i], default(double), a[j])) );
		}
		#line default
		
	}
}


