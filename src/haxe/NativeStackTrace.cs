// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe {
	public class NativeStackTrace : global::haxe.lang.HxObject {
		
		public NativeStackTrace(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public NativeStackTrace() {
			#line 11 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			global::haxe.NativeStackTrace.__hx_ctor_haxe_NativeStackTrace(this);
		}
		#line default
		
		protected static void __hx_ctor_haxe_NativeStackTrace(global::haxe.NativeStackTrace __hx_this) {
		}
		
		
		[System.ThreadStaticAttribute]
		public static global::System.Exception exception;
		
		public static void saveStack(object e) {
			#line 17 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (e) )) );
		}
		#line default
		
		public static global::System.Diagnostics.StackTrace callStack() {
			unchecked {
				#line 21 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				return new global::System.Diagnostics.StackTrace(((int) (1) ), ((bool) (true) ));
			}
			#line default
		}
		
		
		public static global::System.Diagnostics.StackTrace exceptionStack() {
			#line 25 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			global::System.Exception _g = global::haxe.NativeStackTrace.exception;
			if (( _g == null )) {
				#line 26 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				return null;
			}
			else {
				#line 27 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				global::System.Exception e = _g;
				#line 27 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				return new global::System.Diagnostics.StackTrace(((global::System.Exception) (e) ), ((bool) (true) ));
			}
			
		}
		#line default
		
		public static global::Array<object> toHaxe(global::System.Diagnostics.StackTrace native, global::haxe.lang.Null<int> skip) {
			#line 31 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			int skip1 = ( ( ! (skip.hasValue) ) ? (0) : ((skip).@value) );
			global::Array<object> stack = new global::Array<object>(new object[]{});
			#line 33 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			if (( native == null )) {
				#line 34 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				return stack;
			}
			
			#line 36 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			int cnt = 0;
			{
				#line 37 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				int _g = 0;
				#line 37 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				int _g1 = native.FrameCount;
				#line 37 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
				while (( _g < _g1 )) {
					#line 37 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					int i = _g++;
					global::System.Diagnostics.StackFrame frame = native.GetFrame(((int) (i) ));
					#line 39 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					global::System.Reflection.MethodBase m = frame.GetMethod();
					#line 41 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					if (( m == null )) {
						#line 42 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
						continue;
					}
					
					#line 44 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					if (( skip1 > cnt++ )) {
						#line 45 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
						continue;
					}
					
					#line 48 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					global::haxe.StackItem method = global::haxe.StackItem.Method(( ( m as global::System.Reflection.MemberInfo ).ReflectedType as global::System.Reflection.MemberInfo ).ToString(), ( m as global::System.Reflection.MemberInfo ).Name);
					#line 50 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					string fileName = frame.GetFileName();
					int lineNumber = frame.GetFileLineNumber();
					#line 53 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
					if (( ( fileName != null ) || ( lineNumber >= 0 ) )) {
						#line 54 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
						stack.push(global::haxe.StackItem.FilePos(method, fileName, lineNumber, default(global::haxe.lang.Null<int>)));
					}
					else {
						#line 56 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
						stack.push(method);
					}
					
				}
				
			}
			
			#line 58 "/opt/haxe/std/cs/_std/haxe/NativeStackTrace.hx"
			return stack;
		}
		#line default
		
	}
}


