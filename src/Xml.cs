// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace _Xml {
	public sealed class XmlType_Impl_ {
		
		static XmlType_Impl_() {
			unchecked{
				#line 32 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.Element = ((int) (0) );
				#line 37 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.PCData = ((int) (1) );
				#line 42 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.CData = ((int) (2) );
				#line 47 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.Comment = ((int) (3) );
				#line 52 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.DocType = ((int) (4) );
				#line 57 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.ProcessingInstruction = ((int) (5) );
				#line 62 "/opt/haxe/std/Xml.hx"
				global::_Xml.XmlType_Impl_.Document = ((int) (6) );
			}
		}
		#line default
		
		public static int Element;
		
		public static int PCData;
		
		public static int CData;
		
		public static int Comment;
		
		public static int DocType;
		
		public static int ProcessingInstruction;
		
		public static int Document;
		
		public static string toString(int this1) {
			unchecked {
				#line 65 "/opt/haxe/std/Xml.hx"
				switch (((int) (this1) )) {
					case 0:
					{
						#line 66 "/opt/haxe/std/Xml.hx"
						return "Element";
					}
					
					
					case 1:
					{
						#line 67 "/opt/haxe/std/Xml.hx"
						return "PCData";
					}
					
					
					case 2:
					{
						#line 68 "/opt/haxe/std/Xml.hx"
						return "CData";
					}
					
					
					case 3:
					{
						#line 69 "/opt/haxe/std/Xml.hx"
						return "Comment";
					}
					
					
					case 4:
					{
						#line 70 "/opt/haxe/std/Xml.hx"
						return "DocType";
					}
					
					
					case 5:
					{
						#line 71 "/opt/haxe/std/Xml.hx"
						return "ProcessingInstruction";
					}
					
					
					case 6:
					{
						#line 72 "/opt/haxe/std/Xml.hx"
						return "Document";
					}
					
					
				}
				
				#line 64 "/opt/haxe/std/Xml.hx"
				return null;
			}
			#line default
		}
		
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
public class Xml : global::haxe.lang.HxObject {
	
	static Xml() {
		unchecked{
			#line 86 "/opt/haxe/std/Xml.hx"
			global::Xml.Element = ((int) (0) );
			#line 91 "/opt/haxe/std/Xml.hx"
			global::Xml.PCData = ((int) (1) );
			#line 96 "/opt/haxe/std/Xml.hx"
			global::Xml.CData = ((int) (2) );
			#line 101 "/opt/haxe/std/Xml.hx"
			global::Xml.Comment = ((int) (3) );
			#line 106 "/opt/haxe/std/Xml.hx"
			global::Xml.DocType = ((int) (4) );
			#line 111 "/opt/haxe/std/Xml.hx"
			global::Xml.ProcessingInstruction = ((int) (5) );
			#line 116 "/opt/haxe/std/Xml.hx"
			global::Xml.Document = ((int) (6) );
		}
	}
	#line default
	
	public Xml(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Xml(int nodeType) {
		#line 397 "/opt/haxe/std/Xml.hx"
		global::Xml.__hx_ctor__Xml(this, nodeType);
	}
	#line default
	
	protected static void __hx_ctor__Xml(global::Xml __hx_this, int nodeType) {
		#line 398 "/opt/haxe/std/Xml.hx"
		__hx_this.nodeType = nodeType;
		__hx_this.children = new global::Array<object>(new object[]{});
		#line 400 "/opt/haxe/std/Xml.hx"
		__hx_this.attributeMap = new global::haxe.ds.StringMap<string>();
	}
	#line default
	
	public static int Element;
	
	public static int PCData;
	
	public static int CData;
	
	public static int Comment;
	
	public static int DocType;
	
	public static int ProcessingInstruction;
	
	public static int Document;
	
	public static global::Xml parse(string str) {
		#line 122 "/opt/haxe/std/Xml.hx"
		return global::haxe.xml.Parser.parse(str, default(global::haxe.lang.Null<bool>));
	}
	#line default
	
	public static global::Xml createElement(string name) {
		#line 183 "/opt/haxe/std/Xml.hx"
		global::Xml xml = new global::Xml(((int) (global::Xml.Element) ));
		{
			#line 184 "/opt/haxe/std/Xml.hx"
			if (( xml.nodeType != global::Xml.Element )) {
				#line 184 "/opt/haxe/std/Xml.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(xml.nodeType)))) );
			}
			
			#line 184 "/opt/haxe/std/Xml.hx"
			xml.nodeName = name;
		}
		
		#line 185 "/opt/haxe/std/Xml.hx"
		return xml;
	}
	#line default
	
	public static global::Xml createPCData(string data) {
		#line 192 "/opt/haxe/std/Xml.hx"
		global::Xml xml = new global::Xml(((int) (global::Xml.PCData) ));
		{
			#line 193 "/opt/haxe/std/Xml.hx"
			if (( ( xml.nodeType == global::Xml.Document ) || ( xml.nodeType == global::Xml.Element ) )) {
				#line 193 "/opt/haxe/std/Xml.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(xml.nodeType)))) );
			}
			
			#line 193 "/opt/haxe/std/Xml.hx"
			xml.nodeValue = data;
		}
		
		#line 194 "/opt/haxe/std/Xml.hx"
		return xml;
	}
	#line default
	
	public static global::Xml createCData(string data) {
		#line 201 "/opt/haxe/std/Xml.hx"
		global::Xml xml = new global::Xml(((int) (global::Xml.CData) ));
		{
			#line 202 "/opt/haxe/std/Xml.hx"
			if (( ( xml.nodeType == global::Xml.Document ) || ( xml.nodeType == global::Xml.Element ) )) {
				#line 202 "/opt/haxe/std/Xml.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(xml.nodeType)))) );
			}
			
			#line 202 "/opt/haxe/std/Xml.hx"
			xml.nodeValue = data;
		}
		
		#line 203 "/opt/haxe/std/Xml.hx"
		return xml;
	}
	#line default
	
	public static global::Xml createComment(string data) {
		#line 210 "/opt/haxe/std/Xml.hx"
		global::Xml xml = new global::Xml(((int) (global::Xml.Comment) ));
		{
			#line 211 "/opt/haxe/std/Xml.hx"
			if (( ( xml.nodeType == global::Xml.Document ) || ( xml.nodeType == global::Xml.Element ) )) {
				#line 211 "/opt/haxe/std/Xml.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(xml.nodeType)))) );
			}
			
			#line 211 "/opt/haxe/std/Xml.hx"
			xml.nodeValue = data;
		}
		
		#line 212 "/opt/haxe/std/Xml.hx"
		return xml;
	}
	#line default
	
	public static global::Xml createDocType(string data) {
		#line 219 "/opt/haxe/std/Xml.hx"
		global::Xml xml = new global::Xml(((int) (global::Xml.DocType) ));
		{
			#line 220 "/opt/haxe/std/Xml.hx"
			if (( ( xml.nodeType == global::Xml.Document ) || ( xml.nodeType == global::Xml.Element ) )) {
				#line 220 "/opt/haxe/std/Xml.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(xml.nodeType)))) );
			}
			
			#line 220 "/opt/haxe/std/Xml.hx"
			xml.nodeValue = data;
		}
		
		#line 221 "/opt/haxe/std/Xml.hx"
		return xml;
	}
	#line default
	
	public static global::Xml createProcessingInstruction(string data) {
		#line 228 "/opt/haxe/std/Xml.hx"
		global::Xml xml = new global::Xml(((int) (global::Xml.ProcessingInstruction) ));
		{
			#line 229 "/opt/haxe/std/Xml.hx"
			if (( ( xml.nodeType == global::Xml.Document ) || ( xml.nodeType == global::Xml.Element ) )) {
				#line 229 "/opt/haxe/std/Xml.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(xml.nodeType)))) );
			}
			
			#line 229 "/opt/haxe/std/Xml.hx"
			xml.nodeValue = data;
		}
		
		#line 230 "/opt/haxe/std/Xml.hx"
		return xml;
	}
	#line default
	
	public static global::Xml createDocument() {
		#line 237 "/opt/haxe/std/Xml.hx"
		return new global::Xml(((int) (global::Xml.Document) ));
	}
	#line default
	
	public int nodeType;
	
	public string nodeName;
	
	public string nodeValue;
	
	public global::Xml parent;
	
	public global::Array<object> children;
	
	public global::haxe.ds.StringMap<string> attributeMap;
	
	public string get_nodeName() {
		#line 152 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 153 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 155 "/opt/haxe/std/Xml.hx"
		return this.nodeName;
	}
	#line default
	
	public string set_nodeName(string v) {
		#line 159 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 160 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 162 "/opt/haxe/std/Xml.hx"
		return this.nodeName = v;
	}
	#line default
	
	public string get_nodeValue() {
		#line 166 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType == global::Xml.Document ) || ( this.nodeType == global::Xml.Element ) )) {
			#line 167 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 169 "/opt/haxe/std/Xml.hx"
		return this.nodeValue;
	}
	#line default
	
	public string set_nodeValue(string v) {
		#line 173 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType == global::Xml.Document ) || ( this.nodeType == global::Xml.Element ) )) {
			#line 174 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, unexpected ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 176 "/opt/haxe/std/Xml.hx"
		return this.nodeValue = v;
	}
	#line default
	
	public virtual string @get(string att) {
		#line 245 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 246 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 248 "/opt/haxe/std/Xml.hx"
		return global::haxe.lang.Runtime.toString((((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (this.attributeMap) )) ))) ).@get(att)).toDynamic());
	}
	#line default
	
	public virtual void @set(string att, string @value) {
		#line 256 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 257 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 259 "/opt/haxe/std/Xml.hx"
		((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (this.attributeMap) )) ))) ).@set(att, @value);
	}
	#line default
	
	public virtual void @remove(string att) {
		#line 267 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 268 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 270 "/opt/haxe/std/Xml.hx"
		((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (this.attributeMap) )) ))) ).@remove(att);
	}
	#line default
	
	public virtual bool exists(string att) {
		#line 278 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 279 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 281 "/opt/haxe/std/Xml.hx"
		return ((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (this.attributeMap) )) ))) ).exists(att);
	}
	#line default
	
	public virtual object attributes() {
		#line 288 "/opt/haxe/std/Xml.hx"
		if (( this.nodeType != global::Xml.Element )) {
			#line 289 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 291 "/opt/haxe/std/Xml.hx"
		return ((object) (new global::haxe.ds._StringMap.StringMapKeyIterator<string>(((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (((global::haxe.IMap<string, string>) (this.attributeMap) )) ))) ))) );
	}
	#line default
	
	public object iterator() {
		#line 299 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 299 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 300 "/opt/haxe/std/Xml.hx"
		return new global::haxe.iterators.ArrayIterator<object>(((global::Array<object>) (this.children) ));
	}
	#line default
	
	public virtual object elements() {
		#line 308 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 308 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 309 "/opt/haxe/std/Xml.hx"
		global::Array<object> _g = new global::Array<object>(new object[]{});
		#line 309 "/opt/haxe/std/Xml.hx"
		{
			#line 309 "/opt/haxe/std/Xml.hx"
			int _g1 = 0;
			#line 309 "/opt/haxe/std/Xml.hx"
			global::Array<object> _g2 = this.children;
			#line 309 "/opt/haxe/std/Xml.hx"
			while (( _g1 < _g2.length )) {
				#line 309 "/opt/haxe/std/Xml.hx"
				global::Xml child = ((global::Xml) (_g2[_g1]) );
				#line 309 "/opt/haxe/std/Xml.hx"
				 ++ _g1;
				#line 309 "/opt/haxe/std/Xml.hx"
				if (( child.nodeType == global::Xml.Element )) {
					#line 309 "/opt/haxe/std/Xml.hx"
					_g.push(child);
				}
				
			}
			
		}
		
		#line 309 "/opt/haxe/std/Xml.hx"
		global::Array<object> ret = _g;
		return new global::haxe.iterators.ArrayIterator<object>(((global::Array<object>) (ret) ));
	}
	#line default
	
	public virtual object elementsNamed(string name) {
		#line 318 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 318 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 319 "/opt/haxe/std/Xml.hx"
		global::Array<object> _g = new global::Array<object>(new object[]{});
		{
			#line 320 "/opt/haxe/std/Xml.hx"
			int _g1 = 0;
			#line 320 "/opt/haxe/std/Xml.hx"
			global::Array<object> _g2 = this.children;
			#line 320 "/opt/haxe/std/Xml.hx"
			while (( _g1 < _g2.length )) {
				#line 320 "/opt/haxe/std/Xml.hx"
				global::Xml child = ((global::Xml) (_g2[_g1]) );
				#line 320 "/opt/haxe/std/Xml.hx"
				 ++ _g1;
				bool tmp = default(bool);
				if (( child.nodeType == global::Xml.Element )) {
					#line 321 "/opt/haxe/std/Xml.hx"
					if (( child.nodeType != global::Xml.Element )) {
						#line 321 "/opt/haxe/std/Xml.hx"
						throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element but found ", global::_Xml.XmlType_Impl_.toString(child.nodeType)))) );
					}
					
					#line 321 "/opt/haxe/std/Xml.hx"
					tmp = ( child.nodeName == name );
				}
				else {
					#line 321 "/opt/haxe/std/Xml.hx"
					tmp = false;
				}
				
				#line 321 "/opt/haxe/std/Xml.hx"
				if (tmp) {
					#line 321 "/opt/haxe/std/Xml.hx"
					_g.push(child);
				}
				
			}
			
		}
		
		#line 319 "/opt/haxe/std/Xml.hx"
		global::Array<object> ret = _g;
		#line 323 "/opt/haxe/std/Xml.hx"
		return new global::haxe.iterators.ArrayIterator<object>(((global::Array<object>) (ret) ));
	}
	#line default
	
	public global::Xml firstChild() {
		#line 330 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 330 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 331 "/opt/haxe/std/Xml.hx"
		return ((global::Xml) (this.children[0]) );
	}
	#line default
	
	public virtual global::Xml firstElement() {
		#line 338 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 338 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 339 "/opt/haxe/std/Xml.hx"
		{
			#line 339 "/opt/haxe/std/Xml.hx"
			int _g = 0;
			#line 339 "/opt/haxe/std/Xml.hx"
			global::Array<object> _g1 = this.children;
			#line 339 "/opt/haxe/std/Xml.hx"
			while (( _g < _g1.length )) {
				#line 339 "/opt/haxe/std/Xml.hx"
				global::Xml child = ((global::Xml) (_g1[_g]) );
				#line 339 "/opt/haxe/std/Xml.hx"
				 ++ _g;
				if (( child.nodeType == global::Xml.Element )) {
					#line 341 "/opt/haxe/std/Xml.hx"
					return child;
				}
				
			}
			
		}
		
		#line 344 "/opt/haxe/std/Xml.hx"
		return null;
	}
	#line default
	
	public virtual void addChild(global::Xml x) {
		#line 354 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 354 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 355 "/opt/haxe/std/Xml.hx"
		if (( x.parent != null )) {
			#line 356 "/opt/haxe/std/Xml.hx"
			x.parent.removeChild(x);
		}
		
		#line 358 "/opt/haxe/std/Xml.hx"
		this.children.push(x);
		x.parent = this;
	}
	#line default
	
	public virtual bool removeChild(global::Xml x) {
		#line 367 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 367 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 368 "/opt/haxe/std/Xml.hx"
		if (this.children.@remove(x)) {
			#line 369 "/opt/haxe/std/Xml.hx"
			x.parent = null;
			return true;
		}
		
		#line 372 "/opt/haxe/std/Xml.hx"
		return false;
	}
	#line default
	
	public virtual void insertChild(global::Xml x, int pos) {
		#line 382 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 382 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
		#line 383 "/opt/haxe/std/Xml.hx"
		if (( x.parent != null )) {
			#line 384 "/opt/haxe/std/Xml.hx"
			x.parent.children.@remove(x);
		}
		
		#line 386 "/opt/haxe/std/Xml.hx"
		this.children.insert(pos, x);
		x.parent = this;
	}
	#line default
	
	public string toString() {
		#line 394 "/opt/haxe/std/Xml.hx"
		return global::haxe.xml.Printer.print(this, default(global::haxe.lang.Null<bool>));
	}
	#line default
	
	public void ensureElementType() {
		#line 404 "/opt/haxe/std/Xml.hx"
		if (( ( this.nodeType != global::Xml.Document ) && ( this.nodeType != global::Xml.Element ) )) {
			#line 405 "/opt/haxe/std/Xml.hx"
			throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Bad node type, expected Element or Document but found ", global::_Xml.XmlType_Impl_.toString(this.nodeType)))) );
		}
		
	}
	#line default
	
	public override double __hx_setField_f(string field, int hash, double @value, bool handleProperties) {
		unchecked {
			#line 82 "/opt/haxe/std/Xml.hx"
			switch (hash) {
				case 1988514268:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.nodeType = ((int) (@value) );
					#line 82 "/opt/haxe/std/Xml.hx"
					return @value;
				}
				
				
				default:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return base.__hx_setField_f(field, hash, @value, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
		unchecked {
			#line 82 "/opt/haxe/std/Xml.hx"
			switch (hash) {
				case 364006368:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.attributeMap = ((global::haxe.ds.StringMap<string>) (global::haxe.ds.StringMap<object>.__hx_cast<string>(((global::haxe.ds.StringMap) (@value) ))) );
					#line 82 "/opt/haxe/std/Xml.hx"
					return @value;
				}
				
				
				case 1886001471:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.children = ((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (@value) ))) );
					#line 82 "/opt/haxe/std/Xml.hx"
					return @value;
				}
				
				
				case 1836975402:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.parent = ((global::Xml) (@value) );
					#line 82 "/opt/haxe/std/Xml.hx"
					return @value;
				}
				
				
				case 1441685007:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					if (handleProperties) {
						#line 82 "/opt/haxe/std/Xml.hx"
						this.set_nodeValue(global::haxe.lang.Runtime.toString(@value));
						#line 82 "/opt/haxe/std/Xml.hx"
						return @value;
					}
					else {
						#line 82 "/opt/haxe/std/Xml.hx"
						this.nodeValue = global::haxe.lang.Runtime.toString(@value);
						#line 82 "/opt/haxe/std/Xml.hx"
						return @value;
					}
					
				}
				
				
				case 1920782701:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					if (handleProperties) {
						#line 82 "/opt/haxe/std/Xml.hx"
						this.set_nodeName(global::haxe.lang.Runtime.toString(@value));
						#line 82 "/opt/haxe/std/Xml.hx"
						return @value;
					}
					else {
						#line 82 "/opt/haxe/std/Xml.hx"
						this.nodeName = global::haxe.lang.Runtime.toString(@value);
						#line 82 "/opt/haxe/std/Xml.hx"
						return @value;
					}
					
				}
				
				
				case 1988514268:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.nodeType = ((int) (global::haxe.lang.Runtime.toInt(@value)) );
					#line 82 "/opt/haxe/std/Xml.hx"
					return @value;
				}
				
				
				default:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return base.__hx_setField(field, hash, @value, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
		unchecked {
			#line 82 "/opt/haxe/std/Xml.hx"
			switch (hash) {
				case 2081356408:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "ensureElementType", 2081356408)) );
				}
				
				
				case 946786476:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "toString", 946786476)) );
				}
				
				
				case 225347491:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "insertChild", 225347491)) );
				}
				
				
				case 1139639992:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "removeChild", 1139639992)) );
				}
				
				
				case 1058459579:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "addChild", 1058459579)) );
				}
				
				
				case 798803052:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "firstElement", 798803052)) );
				}
				
				
				case 60289868:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "firstChild", 60289868)) );
				}
				
				
				case 1116398082:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "elementsNamed", 1116398082)) );
				}
				
				
				case 63190583:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "elements", 63190583)) );
				}
				
				
				case 328878574:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "iterator", 328878574)) );
				}
				
				
				case 393324759:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "attributes", 393324759)) );
				}
				
				
				case 1071652316:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "exists", 1071652316)) );
				}
				
				
				case 76061764:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "remove", 76061764)) );
				}
				
				
				case 5741474:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set", 5741474)) );
				}
				
				
				case 5144726:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get", 5144726)) );
				}
				
				
				case 1549276146:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_nodeValue", 1549276146)) );
				}
				
				
				case 391262694:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_nodeValue", 391262694)) );
				}
				
				
				case 1016047850:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "set_nodeName", 1016047850)) );
				}
				
				
				case 664175990:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "get_nodeName", 664175990)) );
				}
				
				
				case 364006368:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.attributeMap;
				}
				
				
				case 1886001471:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.children;
				}
				
				
				case 1836975402:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.parent;
				}
				
				
				case 1441685007:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ( (handleProperties) ? (this.get_nodeValue()) : (this.nodeValue) );
				}
				
				
				case 1920782701:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ( (handleProperties) ? (this.get_nodeName()) : (this.nodeName) );
				}
				
				
				case 1988514268:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.nodeType;
				}
				
				
				default:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override double __hx_getField_f(string field, int hash, bool throwErrors, bool handleProperties) {
		unchecked {
			#line 82 "/opt/haxe/std/Xml.hx"
			switch (hash) {
				case 1988514268:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return ((double) (this.nodeType) );
				}
				
				
				default:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return base.__hx_getField_f(field, hash, throwErrors, handleProperties);
				}
				
			}
			
		}
		#line default
	}
	
	
	public override object __hx_invokeField(string field, int hash, object[] dynargs) {
		unchecked {
			#line 82 "/opt/haxe/std/Xml.hx"
			switch (hash) {
				case 2081356408:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.ensureElementType();
					#line 82 "/opt/haxe/std/Xml.hx"
					break;
				}
				
				
				case 946786476:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.toString();
				}
				
				
				case 225347491:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.insertChild(((global::Xml) (dynargs[0]) ), ((int) (global::haxe.lang.Runtime.toInt(dynargs[1])) ));
					#line 82 "/opt/haxe/std/Xml.hx"
					break;
				}
				
				
				case 1139639992:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.removeChild(((global::Xml) (dynargs[0]) ));
				}
				
				
				case 1058459579:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.addChild(((global::Xml) (dynargs[0]) ));
					#line 82 "/opt/haxe/std/Xml.hx"
					break;
				}
				
				
				case 798803052:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.firstElement();
				}
				
				
				case 60289868:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.firstChild();
				}
				
				
				case 1116398082:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.elementsNamed(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 63190583:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.elements();
				}
				
				
				case 328878574:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.iterator();
				}
				
				
				case 393324759:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.attributes();
				}
				
				
				case 1071652316:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.exists(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 76061764:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.@remove(global::haxe.lang.Runtime.toString(dynargs[0]));
					#line 82 "/opt/haxe/std/Xml.hx"
					break;
				}
				
				
				case 5741474:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					this.@set(global::haxe.lang.Runtime.toString(dynargs[0]), global::haxe.lang.Runtime.toString(dynargs[1]));
					#line 82 "/opt/haxe/std/Xml.hx"
					break;
				}
				
				
				case 5144726:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.@get(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 1549276146:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.set_nodeValue(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 391262694:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.get_nodeValue();
				}
				
				
				case 1016047850:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.set_nodeName(global::haxe.lang.Runtime.toString(dynargs[0]));
				}
				
				
				case 664175990:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return this.get_nodeName();
				}
				
				
				default:
				{
					#line 82 "/opt/haxe/std/Xml.hx"
					return base.__hx_invokeField(field, hash, dynargs);
				}
				
			}
			
			#line 82 "/opt/haxe/std/Xml.hx"
			return null;
		}
		#line default
	}
	
	
	public override void __hx_getFields(global::Array<string> baseArr) {
		#line 82 "/opt/haxe/std/Xml.hx"
		baseArr.push("attributeMap");
		#line 82 "/opt/haxe/std/Xml.hx"
		baseArr.push("children");
		#line 82 "/opt/haxe/std/Xml.hx"
		baseArr.push("parent");
		#line 82 "/opt/haxe/std/Xml.hx"
		baseArr.push("nodeValue");
		#line 82 "/opt/haxe/std/Xml.hx"
		baseArr.push("nodeName");
		#line 82 "/opt/haxe/std/Xml.hx"
		baseArr.push("nodeType");
		#line 82 "/opt/haxe/std/Xml.hx"
		base.__hx_getFields(baseArr);
	}
	#line default
	
	public override string ToString(){
		return this.toString();
	}
	
	
}


