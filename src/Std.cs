// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
public class Std {
	
	public Std() {
	}
	
	
	public static bool @is(object v, object t) {
		#line 28 "/opt/haxe/std/cs/_std/Std.hx"
		return global::Std.isOfType(v, t);
	}
	#line default
	
	public static bool isOfType(object v, object t) {
		unchecked {
			#line 32 "/opt/haxe/std/cs/_std/Std.hx"
			if (( v == null )) {
				#line 33 "/opt/haxe/std/cs/_std/Std.hx"
				return false;
			}
			
			#line 34 "/opt/haxe/std/cs/_std/Std.hx"
			if (( t == null )) {
				#line 35 "/opt/haxe/std/cs/_std/Std.hx"
				return false;
			}
			
			#line 36 "/opt/haxe/std/cs/_std/Std.hx"
			global::System.Type clt = ( t as global::System.Type );
			if (global::haxe.lang.Runtime.typeEq(clt, null)) {
				#line 38 "/opt/haxe/std/cs/_std/Std.hx"
				return false;
			}
			
			#line 40 "/opt/haxe/std/cs/_std/Std.hx"
			switch (( clt as global::System.Reflection.MemberInfo ).ToString()) {
				case "System.Boolean":
				{
					#line 46 "/opt/haxe/std/cs/_std/Std.hx"
					return v is bool;
				}
				
				
				case "System.Double":
				{
					#line 42 "/opt/haxe/std/cs/_std/Std.hx"
					return v is double || v is int;
				}
				
				
				case "System.Int32":
				{
					#line 44 "/opt/haxe/std/cs/_std/Std.hx"
					return global::haxe.lang.Runtime.isInt(v);
				}
				
				
				case "System.Object":
				{
					#line 48 "/opt/haxe/std/cs/_std/Std.hx"
					return true;
				}
				
				
			}
			
			#line 51 "/opt/haxe/std/cs/_std/Std.hx"
			global::System.Type vt = v.GetType();
			#line 53 "/opt/haxe/std/cs/_std/Std.hx"
			if (clt.IsAssignableFrom(((global::System.Type) (vt) ))) {
				#line 54 "/opt/haxe/std/cs/_std/Std.hx"
				return true;
			}
			
			#line 57 "/opt/haxe/std/cs/_std/Std.hx"
			{
				#line 57 "/opt/haxe/std/cs/_std/Std.hx"
				global::System.Type[] _g1_arr = clt.GetInterfaces();
				#line 57 "/opt/haxe/std/cs/_std/Std.hx"
				uint _g1_idx = ((uint) (0) );
				#line 57 "/opt/haxe/std/cs/_std/Std.hx"
				while (( _g1_idx < ( _g1_arr as global::System.Array ).Length )) {
					#line 57 "/opt/haxe/std/cs/_std/Std.hx"
					_g1_idx += ((uint) (1) );
					#line 57 "/opt/haxe/std/cs/_std/Std.hx"
					global::System.Type iface = ((global::System.Type) (_g1_arr[((int) (((uint) (( _g1_idx - 1 )) )) )]) );
					global::haxe.lang.GenericInterface g = global::haxe.lang.Runtime.getGenericAttr(iface);
					#line 59 "/opt/haxe/std/cs/_std/Std.hx"
					if (( ( g != null ) && global::haxe.lang.Runtime.typeEq(g.generic, clt) )) {
						#line 60 "/opt/haxe/std/cs/_std/Std.hx"
						return iface.IsAssignableFrom(((global::System.Type) (vt) ));
					}
					
				}
				
			}
			
			#line 65 "/opt/haxe/std/cs/_std/Std.hx"
			return false;
		}
		#line default
	}
	
	
	public static string @string(object s) {
		#line 69 "/opt/haxe/std/cs/_std/Std.hx"
		if (( s == null )) {
			#line 70 "/opt/haxe/std/cs/_std/Std.hx"
			return "null";
		}
		
		#line 71 "/opt/haxe/std/cs/_std/Std.hx"
		if (( s is bool )) {
			#line 72 "/opt/haxe/std/cs/_std/Std.hx"
			if (global::haxe.lang.Runtime.toBool(s)) {
				#line 72 "/opt/haxe/std/cs/_std/Std.hx"
				return "true";
			}
			else {
				#line 72 "/opt/haxe/std/cs/_std/Std.hx"
				return "false";
			}
			
		}
		
		#line 74 "/opt/haxe/std/cs/_std/Std.hx"
		return s.ToString();
	}
	#line default
	
	public static int @int(double x) {
		#line 78 "/opt/haxe/std/cs/_std/Std.hx"
		return ((int) (x) );
	}
	#line default
	
	public static global::haxe.lang.Null<int> parseInt(string x) {
		unchecked {
			#line 82 "/opt/haxe/std/cs/_std/Std.hx"
			if (( x == null )) {
				#line 83 "/opt/haxe/std/cs/_std/Std.hx"
				return default(global::haxe.lang.Null<int>);
			}
			
			#line 85 "/opt/haxe/std/cs/_std/Std.hx"
			int @base = 10;
			int len = x.Length;
			#line 87 "/opt/haxe/std/cs/_std/Std.hx"
			int foundCount = 0;
			int sign = 0;
			#line 89 "/opt/haxe/std/cs/_std/Std.hx"
			int firstDigitIndex = 0;
			int lastDigitIndex = -1;
			#line 91 "/opt/haxe/std/cs/_std/Std.hx"
			int previous = 0;
			#line 93 "/opt/haxe/std/cs/_std/Std.hx"
			{
				#line 93 "/opt/haxe/std/cs/_std/Std.hx"
				int _g = 0;
				#line 93 "/opt/haxe/std/cs/_std/Std.hx"
				int _g1 = len;
				#line 93 "/opt/haxe/std/cs/_std/Std.hx"
				while (( _g < _g1 )) {
					#line 93 "/opt/haxe/std/cs/_std/Std.hx"
					int i = _g++;
					int c = ( (( ((uint) (i) ) < x.Length )) ? (((int) (x[i]) )) : (-1) );
					#line 95 "/opt/haxe/std/cs/_std/Std.hx"
					if (( ( ( c > 8 ) && ( c < 14 ) ) || ( c == 32 ) )) {
						#line 97 "/opt/haxe/std/cs/_std/Std.hx"
						if (( foundCount > 0 )) {
							#line 98 "/opt/haxe/std/cs/_std/Std.hx"
							return default(global::haxe.lang.Null<int>);
						}
						
						#line 100 "/opt/haxe/std/cs/_std/Std.hx"
						continue;
					}
					else {
						#line 95 "/opt/haxe/std/cs/_std/Std.hx"
						switch (c) {
							case 43:
							{
								#line 103 "/opt/haxe/std/cs/_std/Std.hx"
								if (( foundCount == 0 )) {
									#line 104 "/opt/haxe/std/cs/_std/Std.hx"
									sign = 1;
								}
								else if (( ( 48 <= c ) && ( c <= 57 ) )) {
								}
								else if (( ( @base == 16 ) && (( ( ( 97 <= c ) && ( c <= 122 ) ) || ( ( 65 <= c ) && ( c <= 90 ) ) )) )) {
								}
								else {
									#line 111 "/opt/haxe/std/cs/_std/Std.hx"
									goto label1;
								}
								
								#line 103 "/opt/haxe/std/cs/_std/Std.hx"
								break;
							}
							
							
							case 45:
							{
								#line 101 "/opt/haxe/std/cs/_std/Std.hx"
								if (( foundCount == 0 )) {
									#line 102 "/opt/haxe/std/cs/_std/Std.hx"
									sign = -1;
								}
								else if (( ( 48 <= c ) && ( c <= 57 ) )) {
								}
								else if (( ( @base == 16 ) && (( ( ( 97 <= c ) && ( c <= 122 ) ) || ( ( 65 <= c ) && ( c <= 90 ) ) )) )) {
								}
								else {
									#line 111 "/opt/haxe/std/cs/_std/Std.hx"
									goto label1;
								}
								
								#line 101 "/opt/haxe/std/cs/_std/Std.hx"
								break;
							}
							
							
							case 48:
							{
								#line 105 "/opt/haxe/std/cs/_std/Std.hx"
								if (( ( foundCount == 0 ) || ( ( foundCount == 1 ) && ( sign != 0 ) ) )) {
								}
								else if (( ( 48 <= c ) && ( c <= 57 ) )) {
								}
								else if (( ( @base == 16 ) && (( ( ( 97 <= c ) && ( c <= 122 ) ) || ( ( 65 <= c ) && ( c <= 90 ) ) )) )) {
								}
								else {
									#line 111 "/opt/haxe/std/cs/_std/Std.hx"
									goto label1;
								}
								
								#line 105 "/opt/haxe/std/cs/_std/Std.hx"
								break;
							}
							
							
							case 88:
							case 120:
							{
								#line 106 "/opt/haxe/std/cs/_std/Std.hx"
								if (( ( previous == 48 ) && (( ( ( foundCount == 1 ) && ( sign == 0 ) ) || ( ( foundCount == 2 ) && ( sign != 0 ) ) )) )) {
									#line 107 "/opt/haxe/std/cs/_std/Std.hx"
									@base = 16;
								}
								else if (( ( 48 <= c ) && ( c <= 57 ) )) {
								}
								else if (( ( @base == 16 ) && (( ( ( 97 <= c ) && ( c <= 122 ) ) || ( ( 65 <= c ) && ( c <= 90 ) ) )) )) {
								}
								else {
									#line 111 "/opt/haxe/std/cs/_std/Std.hx"
									goto label1;
								}
								
								#line 106 "/opt/haxe/std/cs/_std/Std.hx"
								break;
							}
							
							
							default:
							{
								#line 108 "/opt/haxe/std/cs/_std/Std.hx"
								if (( ( 48 <= c ) && ( c <= 57 ) )) {
								}
								else if (( ( @base == 16 ) && (( ( ( 97 <= c ) && ( c <= 122 ) ) || ( ( 65 <= c ) && ( c <= 90 ) ) )) )) {
								}
								else {
									#line 111 "/opt/haxe/std/cs/_std/Std.hx"
									goto label1;
								}
								
								#line 108 "/opt/haxe/std/cs/_std/Std.hx"
								break;
							}
							
						}
						
					}
					
					#line 113 "/opt/haxe/std/cs/_std/Std.hx"
					if (( ( ( foundCount == 0 ) && ( sign == 0 ) ) || ( ( foundCount == 1 ) && ( sign != 0 ) ) )) {
						#line 114 "/opt/haxe/std/cs/_std/Std.hx"
						firstDigitIndex = i;
					}
					
					#line 116 "/opt/haxe/std/cs/_std/Std.hx"
					 ++ foundCount;
					lastDigitIndex = i;
					#line 118 "/opt/haxe/std/cs/_std/Std.hx"
					previous = c;
				}
				label1: {};
			}
			
			#line 120 "/opt/haxe/std/cs/_std/Std.hx"
			if (( firstDigitIndex <= lastDigitIndex )) {
				#line 121 "/opt/haxe/std/cs/_std/Std.hx"
				string digits = global::haxe.lang.StringExt.substring(x, firstDigitIndex, new global::haxe.lang.Null<int>(( lastDigitIndex + 1 ), true));
				#line 123 "/opt/haxe/std/cs/_std/Std.hx"
				try {
					#line 123 "/opt/haxe/std/cs/_std/Std.hx"
					return new global::haxe.lang.Null<int>(( (( (( sign == -1 )) ? (-1) : (1) )) * global::System.Convert.ToInt32(((string) (digits) ), ((int) (@base) )) ), true);
				}
				catch (global::System.FormatException e){
					#line 125 "/opt/haxe/std/cs/_std/Std.hx"
					return default(global::haxe.lang.Null<int>);
				}
				
				
			}
			
			#line 128 "/opt/haxe/std/cs/_std/Std.hx"
			return default(global::haxe.lang.Null<int>);
		}
		#line default
	}
	
	
	public static double parseFloat(string x) {
		unchecked {
			#line 132 "/opt/haxe/std/cs/_std/Std.hx"
			if (( x == null )) {
				#line 133 "/opt/haxe/std/cs/_std/Std.hx"
				return global::Math.NaN;
			}
			
			#line 134 "/opt/haxe/std/cs/_std/Std.hx"
			x = x.TrimStart();
			bool found = false;
			bool hasDot = false;
			bool hasSign = false;
			bool hasE = false;
			bool hasESign = false;
			bool hasEData = false;
			#line 141 "/opt/haxe/std/cs/_std/Std.hx"
			int i = -1;
			#line 145 "/opt/haxe/std/cs/_std/Std.hx"
			while ((  ++ i < x.Length )) {
				#line 146 "/opt/haxe/std/cs/_std/Std.hx"
				int chr = ((int) (x[i]) );
				if (( ( chr >= 48 ) && ( chr <= 57 ) )) {
					#line 148 "/opt/haxe/std/cs/_std/Std.hx"
					if (hasE) {
						#line 149 "/opt/haxe/std/cs/_std/Std.hx"
						hasEData = true;
					}
					
					#line 151 "/opt/haxe/std/cs/_std/Std.hx"
					found = true;
				}
				else {
					#line 153 "/opt/haxe/std/cs/_std/Std.hx"
					switch (chr) {
						case 43:
						case 45:
						{
							#line 158 "/opt/haxe/std/cs/_std/Std.hx"
							if ((  ! (found)  &&  ! (hasSign)  )) {
								#line 159 "/opt/haxe/std/cs/_std/Std.hx"
								hasSign = true;
							}
							else if (( ( ( found &&  ! (hasESign)  ) && hasE ) &&  ! (hasEData)  )) {
								#line 161 "/opt/haxe/std/cs/_std/Std.hx"
								hasESign = true;
							}
							else {
								#line 163 "/opt/haxe/std/cs/_std/Std.hx"
								goto label1;
							}
							
							#line 158 "/opt/haxe/std/cs/_std/Std.hx"
							break;
						}
						
						
						case 46:
						{
							#line 156 "/opt/haxe/std/cs/_std/Std.hx"
							if ( ! (hasDot) ) {
								#line 157 "/opt/haxe/std/cs/_std/Std.hx"
								hasDot = true;
							}
							else {
								#line 163 "/opt/haxe/std/cs/_std/Std.hx"
								goto label1;
							}
							
							#line 156 "/opt/haxe/std/cs/_std/Std.hx"
							break;
						}
						
						
						case 69:
						case 101:
						{
							#line 154 "/opt/haxe/std/cs/_std/Std.hx"
							if ( ! (hasE) ) {
								#line 155 "/opt/haxe/std/cs/_std/Std.hx"
								hasE = true;
							}
							else {
								#line 163 "/opt/haxe/std/cs/_std/Std.hx"
								goto label1;
							}
							
							#line 154 "/opt/haxe/std/cs/_std/Std.hx"
							break;
						}
						
						
						default:
						{
							#line 163 "/opt/haxe/std/cs/_std/Std.hx"
							goto label1;
						}
						
					}
					
				}
				
			}
			label1: {};
			#line 166 "/opt/haxe/std/cs/_std/Std.hx"
			if (( hasE &&  ! (hasEData)  )) {
				#line 167 "/opt/haxe/std/cs/_std/Std.hx"
				 -- i;
				if (hasESign) {
					#line 169 "/opt/haxe/std/cs/_std/Std.hx"
					 -- i;
				}
				
			}
			
			#line 171 "/opt/haxe/std/cs/_std/Std.hx"
			if (( i != x.Length )) {
				#line 172 "/opt/haxe/std/cs/_std/Std.hx"
				x = global::haxe.lang.StringExt.substr(x, 0, new global::haxe.lang.Null<int>(i, true));
			}
			
			#line 174 "/opt/haxe/std/cs/_std/Std.hx"
			try {
				#line 174 "/opt/haxe/std/cs/_std/Std.hx"
				return global::System.Double.Parse(((string) (x) ), ((global::System.IFormatProvider) (global::System.Globalization.CultureInfo.InvariantCulture) ));
			}
			catch (global::System.Exception _g){
				{
					global::haxe.NativeStackTrace.exception = ((global::System.Exception) (((object) (_g) )) );
				}
				
				#line 174 "/opt/haxe/std/cs/_std/Std.hx"
				return global::Math.NaN;
			}
			
			
		}
		#line default
	}
	
	
	public static int random(int x) {
		#line 187 "/opt/haxe/std/cs/_std/Std.hx"
		if (( x <= 0 )) {
			#line 188 "/opt/haxe/std/cs/_std/Std.hx"
			return 0;
		}
		
		#line 189 "/opt/haxe/std/cs/_std/Std.hx"
		return global::Math.rand.Next(((int) (x) ));
	}
	#line default
	
}


