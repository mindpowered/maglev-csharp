// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace sys.io {
	public class Process : global::haxe.lang.HxObject {
		
		public Process(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public Process(string cmd, global::Array<string> args, global::haxe.lang.Null<bool> detached) {
			#line 39 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			global::sys.io.Process.__hx_ctor_sys_io_Process(this, cmd, args, detached);
		}
		#line default
		
		protected static void __hx_ctor_sys_io_Process(global::sys.io.Process __hx_this, string cmd, global::Array<string> args, global::haxe.lang.Null<bool> detached) {
			#line 40 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			if (((detached)).@value) {
				#line 41 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown("Detached process is not supported on this platform")) );
			}
			
			#line 42 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			__hx_this.native = global::sys.io.Process.createNativeProcess(cmd, args);
			__hx_this.native.Start();
			#line 45 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			__hx_this.stdout = new global::cs.io.NativeInput(((global::System.IO.Stream) (__hx_this.native.StandardOutput.BaseStream) ));
			__hx_this.stderr = new global::cs.io.NativeInput(((global::System.IO.Stream) (__hx_this.native.StandardError.BaseStream) ));
			#line 47 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			__hx_this.stdin = new global::cs.io.NativeOutput(((global::System.IO.Stream) (__hx_this.native.StandardInput.BaseStream) ));
		}
		#line default
		
		public static global::System.Diagnostics.Process createNativeProcess(string cmd, global::Array<string> args) {
			unchecked {
				#line 52 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				global::System.Diagnostics.Process native = new global::System.Diagnostics.Process();
				native.StartInfo.CreateNoWindow = ((bool) (true) );
				#line 54 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				native.StartInfo.RedirectStandardError = ((bool) (native.StartInfo.RedirectStandardInput = ((bool) (native.StartInfo.RedirectStandardOutput = ((bool) (true) )) )) );
				if (( args != null )) {
					#line 57 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					if (( ( global::haxe.lang.StringExt.indexOf(cmd, "/", default(global::haxe.lang.Null<int>)) != -1 ) || ( global::haxe.lang.StringExt.indexOf(cmd, "\\", default(global::haxe.lang.Null<int>)) != -1 ) )) {
						#line 58 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						cmd = global::sys.FileSystem.fullPath(cmd);
					}
					
					#line 59 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					native.StartInfo.FileName = ((string) (cmd) );
					native.StartInfo.UseShellExecute = ((bool) (false) );
					#line 61 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					native.StartInfo.Arguments = ((string) (global::sys.io.Process.buildArgumentsString(args)) );
				}
				else {
					#line 63 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					if (( global::Sys.systemName() == "Windows" )) {
						#line 65 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						global::System.Diagnostics.ProcessStartInfo tmp = native.StartInfo;
						#line 65 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						string _g = global::System.Environment.GetEnvironmentVariable(((string) ("COMSPEC") ));
						#line 65 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						string tmp1 = null;
						if (( _g == null )) {
							#line 65 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							tmp1 = "cmd.exe";
						}
						else {
							#line 67 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							string comspec = _g;
							#line 65 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							tmp1 = comspec;
						}
						
						#line 65 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						tmp.FileName = ((string) (tmp1) );
						#line 69 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						native.StartInfo.Arguments = ((string) (global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("/C \"", cmd), "\"")) );
					}
					else {
						#line 71 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						native.StartInfo.FileName = ((string) ("/bin/sh") );
						native.StartInfo.Arguments = ((string) (global::sys.io.Process.buildArgumentsString(new global::Array<string>(new string[]{"-c", cmd}))) );
					}
					
					#line 74 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					native.StartInfo.UseShellExecute = ((bool) (false) );
				}
				
				#line 76 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				return native;
			}
			#line default
		}
		
		
		public static string buildArgumentsString(global::Array<string> args) {
			unchecked {
				#line 80 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				if (( global::Sys.systemName() == "Windows" )) {
					#line 82 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					global::Array<string> _g = new global::Array<string>(new string[]{});
					{
						#line 83 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						int _g1 = 0;
						#line 83 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						while (( _g1 < args.length )) {
							#line 83 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							string a = args[_g1];
							#line 83 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							 ++ _g1;
							_g.push(global::haxe.SysTools.quoteWinArg(a, false));
						}
						
					}
					
					#line 82 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					return _g.@join(" ");
				}
				else {
					#line 89 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					global::Array<string> _g2 = new global::Array<string>(new string[]{});
					{
						#line 90 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						int _g3 = 0;
						#line 90 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						while (( _g3 < args.length )) {
							#line 90 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							string arg = args[_g3];
							#line 90 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							 ++ _g3;
							global::StringBuf b = new global::StringBuf();
							#line 92 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							b.b.Append(((string) ("\"") ));
							{
								#line 93 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
								int _g4 = 0;
								#line 93 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
								int _g5 = arg.Length;
								#line 93 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
								while (( _g4 < _g5 )) {
									#line 93 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
									int i = _g4++;
									global::haxe.lang.Null<int> c = global::haxe.lang.StringExt.charCodeAt(arg, i);
									#line 95 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
									if ( ! (c.hasValue) ) {
									}
									else {
										#line 95 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
										switch (((c)).@value) {
											case 34:
											case 92:
											{
												#line 97 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
												b.addChar(92);
												#line 97 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
												break;
											}
											
											
											default:
											{
												#line 98 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
												break;
											}
											
										}
										
									}
									
									#line 100 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
									b.addChar((c).@value);
								}
								
							}
							
							#line 102 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
							b.b.Append(((string) ("\"") ));
							_g2.push(b.b.ToString());
						}
						
					}
					
					#line 89 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
					return _g2.@join(" ");
				}
				
			}
			#line default
		}
		
		
		public global::haxe.io.Input stdout;
		
		public global::haxe.io.Input stderr;
		
		public global::haxe.io.Output stdin;
		
		public global::System.Diagnostics.Process native;
		
		public virtual int getPid() {
			#line 110 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			return this.native.Id;
		}
		#line default
		
		public virtual global::haxe.lang.Null<int> exitCode(global::haxe.lang.Null<bool> block) {
			#line 113 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			bool block1 = ( ( ! (block.hasValue) ) ? (true) : ((block).@value) );
			if (( ( block1 == false ) &&  ! (this.native.HasExited)  )) {
				#line 115 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				return default(global::haxe.lang.Null<int>);
			}
			
			#line 116 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			this.native.WaitForExit();
			return new global::haxe.lang.Null<int>(this.native.ExitCode, true);
		}
		#line default
		
		public virtual void close() {
			#line 121 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			this.native.Close();
		}
		#line default
		
		public virtual void kill() {
			#line 125 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			this.native.Kill();
		}
		#line default
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				switch (hash) {
					case 572311959:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						this.native = ((global::System.Diagnostics.Process) (@value) );
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return @value;
					}
					
					
					case 68006728:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						this.stdin = ((global::haxe.io.Output) (@value) );
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return @value;
					}
					
					
					case 132916898:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						this.stderr = ((global::haxe.io.Input) (@value) );
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return @value;
					}
					
					
					case 133414859:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						this.stdout = ((global::haxe.io.Input) (@value) );
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return @value;
					}
					
					
					default:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				switch (hash) {
					case 1191829406:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "kill", 1191829406)) );
					}
					
					
					case 1214453688:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "close", 1214453688)) );
					}
					
					
					case 25738091:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "exitCode", 25738091)) );
					}
					
					
					case 589599061:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "getPid", 589599061)) );
					}
					
					
					case 572311959:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return this.native;
					}
					
					
					case 68006728:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return this.stdin;
					}
					
					
					case 132916898:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return this.stderr;
					}
					
					
					case 133414859:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return this.stdout;
					}
					
					
					default:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				switch (hash) {
					case 1191829406:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						this.kill();
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						break;
					}
					
					
					case 1214453688:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						this.close();
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						break;
					}
					
					
					case 25738091:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return (this.exitCode(global::haxe.lang.Null<object>.ofDynamic<bool>(( (( dynargs.Length > 0 )) ? (dynargs[0]) : (null) )))).toDynamic();
					}
					
					
					case 589599061:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return this.getPid();
					}
					
					
					default:
					{
						#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
				return null;
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			baseArr.push("native");
			#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			baseArr.push("stdin");
			#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			baseArr.push("stderr");
			#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			baseArr.push("stdout");
			#line 32 "/opt/haxe/std/cs/_std/sys/io/Process.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
	}
}


