// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
public class Reflect : global::haxe.lang.HxObject {
	
	public Reflect(global::haxe.lang.EmptyObject empty) {
	}
	
	
	public Reflect() {
		#line 33 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::Reflect.__hx_ctor__Reflect(this);
	}
	#line default
	
	protected static void __hx_ctor__Reflect(global::Reflect __hx_this) {
	}
	
	
	public static bool hasField(object o, string field) {
		#line 35 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.IHxObject ihx = ( o as global::haxe.lang.IHxObject );
		if (( ihx != null )) {
			#line 37 "/opt/haxe/std/cs/_std/Reflect.hx"
			return ( ihx.__hx_getField(field, global::haxe.lang.FieldLookup.hash(field), false, true, false) != global::haxe.lang.Runtime.undefined );
		}
		
		#line 39 "/opt/haxe/std/cs/_std/Reflect.hx"
		return global::haxe.lang.Runtime.slowHasField(o, field);
	}
	#line default
	
	public static object field(object o, string field) {
		#line 44 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.IHxObject ihx = ( o as global::haxe.lang.IHxObject );
		if (( ihx != null )) {
			#line 46 "/opt/haxe/std/cs/_std/Reflect.hx"
			return ihx.__hx_getField(field, global::haxe.lang.FieldLookup.hash(field), false, false, false);
		}
		
		#line 48 "/opt/haxe/std/cs/_std/Reflect.hx"
		return global::haxe.lang.Runtime.slowGetField(o, field, false);
	}
	#line default
	
	public static void setField(object o, string field, object @value) {
		#line 53 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.IHxObject ihx = ( o as global::haxe.lang.IHxObject );
		if (( ihx != null )) {
			#line 55 "/opt/haxe/std/cs/_std/Reflect.hx"
			ihx.__hx_setField(field, global::haxe.lang.FieldLookup.hash(field), @value, false);
		}
		else {
			#line 57 "/opt/haxe/std/cs/_std/Reflect.hx"
			global::haxe.lang.Runtime.slowSetField(o, field, @value);
		}
		
	}
	#line default
	
	public static object getProperty(object o, string field) {
		#line 61 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.IHxObject ihx = ( o as global::haxe.lang.IHxObject );
		if (( ihx != null )) {
			#line 63 "/opt/haxe/std/cs/_std/Reflect.hx"
			return ihx.__hx_getField(field, global::haxe.lang.FieldLookup.hash(field), false, false, true);
		}
		
		#line 65 "/opt/haxe/std/cs/_std/Reflect.hx"
		if (global::haxe.lang.Runtime.slowHasField(o, global::haxe.lang.Runtime.concat("get_", field))) {
			#line 66 "/opt/haxe/std/cs/_std/Reflect.hx"
			return global::haxe.lang.Runtime.slowCallField(o, global::haxe.lang.Runtime.concat("get_", field), null);
		}
		
		#line 68 "/opt/haxe/std/cs/_std/Reflect.hx"
		return global::haxe.lang.Runtime.slowGetField(o, field, false);
	}
	#line default
	
	public static void setProperty(object o, string field, object @value) {
		#line 72 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.IHxObject ihx = ( o as global::haxe.lang.IHxObject );
		if (( ihx != null )) {
			#line 74 "/opt/haxe/std/cs/_std/Reflect.hx"
			ihx.__hx_setField(field, global::haxe.lang.FieldLookup.hash(field), @value, true);
		}
		else if (global::haxe.lang.Runtime.slowHasField(o, global::haxe.lang.Runtime.concat("set_", field))) {
			#line 76 "/opt/haxe/std/cs/_std/Reflect.hx"
			global::haxe.lang.Runtime.slowCallField(o, global::haxe.lang.Runtime.concat("set_", field), new object[]{((object) (@value) )});
		}
		else {
			#line 78 "/opt/haxe/std/cs/_std/Reflect.hx"
			global::haxe.lang.Runtime.slowSetField(o, field, @value);
		}
		
	}
	#line default
	
	public static object callMethod(object o, object func, global::Array args) {
		#line 82 "/opt/haxe/std/cs/_std/Reflect.hx"
		object[] ret = new object[((int) (global::haxe.lang.Runtime.getField_f(args, "length", 520590566, true)) )];
		#line 82 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::cs.Lib.p_nativeArray<object>(((global::Array<object>) (global::Array<object>.__hx_cast<object>(((global::Array) (args) ))) ), ((global::System.Array) (ret) ));
		#line 82 "/opt/haxe/std/cs/_std/Reflect.hx"
		object[] args1 = ret;
		return (((global::haxe.lang.Function) (func) )).__hx_invokeDynamic(args1);
	}
	#line default
	
	public static global::Array<string> fields(object o) {
		#line 88 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.IHxObject ihx = ( o as global::haxe.lang.IHxObject );
		if (( ihx != null )) {
			#line 90 "/opt/haxe/std/cs/_std/Reflect.hx"
			global::Array<string> ret = new global::Array<string>(new string[]{});
			ihx.__hx_getFields(ret);
			#line 92 "/opt/haxe/std/cs/_std/Reflect.hx"
			return ret;
		}
		else if (( o is global::System.Type )) {
			#line 94 "/opt/haxe/std/cs/_std/Reflect.hx"
			return global::Type.getClassFields(((global::System.Type) (o) ));
		}
		else {
			#line 96 "/opt/haxe/std/cs/_std/Reflect.hx"
			return global::Reflect.instanceFields(o.GetType());
		}
		
	}
	#line default
	
	public static global::Array<string> instanceFields(global::System.Type c) {
		#line 101 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::System.Type c1 = ((global::System.Type) (c) );
		global::Array<string> ret = new global::Array<string>(new string[]{});
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(global::System.Reflection.BindingFlags.Public, true);
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::System.Reflection.BindingFlags this1 = ( ( ! (initial.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial).@value) );
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial1 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this1) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.Instance) ) ), true);
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::System.Reflection.BindingFlags this2 = ( ( ! (initial1.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial1).@value) );
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.Null<global::System.Reflection.BindingFlags> initial2 = new global::haxe.lang.Null<global::System.Reflection.BindingFlags>(( ((global::System.Reflection.BindingFlags) (this2) ) | ((global::System.Reflection.BindingFlags) (global::System.Reflection.BindingFlags.FlattenHierarchy) ) ), true);
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::System.Reflection.BindingFlags this3 = ( ( ! (initial2.hasValue) ) ? (default(global::System.Reflection.BindingFlags)) : ((initial2).@value) );
		#line 103 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::System.Reflection.FieldInfo[] mis = c1.GetFields(((global::System.Reflection.BindingFlags) (this3) ));
		{
			#line 104 "/opt/haxe/std/cs/_std/Reflect.hx"
			int _g = 0;
			#line 104 "/opt/haxe/std/cs/_std/Reflect.hx"
			int _g1 = ( mis as global::System.Array ).Length;
			#line 104 "/opt/haxe/std/cs/_std/Reflect.hx"
			while (( _g < _g1 )) {
				#line 104 "/opt/haxe/std/cs/_std/Reflect.hx"
				int i = _g++;
				global::System.Reflection.FieldInfo i1 = ((global::System.Reflection.FieldInfo) (mis[i]) );
				#line 106 "/opt/haxe/std/cs/_std/Reflect.hx"
				ret.push(( i1 as global::System.Reflection.MemberInfo ).Name);
			}
			
		}
		
		#line 108 "/opt/haxe/std/cs/_std/Reflect.hx"
		return ret;
	}
	#line default
	
	public static bool isFunction(object f) {
		#line 112 "/opt/haxe/std/cs/_std/Reflect.hx"
		return ( f is global::haxe.lang.Function );
	}
	#line default
	
	public static int compare<T>(T a, T b) {
		#line 116 "/opt/haxe/std/cs/_std/Reflect.hx"
		return global::haxe.lang.Runtime.compare(a, b);
	}
	#line default
	
	public static bool compareMethods(object f1, object f2) {
		#line 121 "/opt/haxe/std/cs/_std/Reflect.hx"
		if (global::haxe.lang.Runtime.eq(f1, f2)) {
			#line 122 "/opt/haxe/std/cs/_std/Reflect.hx"
			return true;
		}
		
		#line 124 "/opt/haxe/std/cs/_std/Reflect.hx"
		if (( ( f1 is global::haxe.lang.Closure ) && ( f2 is global::haxe.lang.Closure ) )) {
			#line 125 "/opt/haxe/std/cs/_std/Reflect.hx"
			global::haxe.lang.Closure f1c = ((global::haxe.lang.Closure) (f1) );
			global::haxe.lang.Closure f2c = ((global::haxe.lang.Closure) (f2) );
			#line 128 "/opt/haxe/std/cs/_std/Reflect.hx"
			if (global::haxe.lang.Runtime.refEq(f1c.obj, f2c.obj)) {
				#line 128 "/opt/haxe/std/cs/_std/Reflect.hx"
				return ( f1c.field == f2c.field );
			}
			else {
				#line 128 "/opt/haxe/std/cs/_std/Reflect.hx"
				return false;
			}
			
		}
		
		#line 131 "/opt/haxe/std/cs/_std/Reflect.hx"
		return false;
	}
	#line default
	
	public static bool isObject(object v) {
		#line 135 "/opt/haxe/std/cs/_std/Reflect.hx"
		if (( v != null )) {
			#line 135 "/opt/haxe/std/cs/_std/Reflect.hx"
			return  ! ((( ( ( v is global::haxe.lang.Enum ) || ( v is global::haxe.lang.Function ) ) || ( v is global::System.ValueType ) ))) ;
		}
		else {
			#line 135 "/opt/haxe/std/cs/_std/Reflect.hx"
			return false;
		}
		
	}
	#line default
	
	public static bool isEnumValue(object v) {
		#line 139 "/opt/haxe/std/cs/_std/Reflect.hx"
		if (( v != null )) {
			#line 139 "/opt/haxe/std/cs/_std/Reflect.hx"
			if ( ! (( v is global::haxe.lang.Enum )) ) {
				#line 139 "/opt/haxe/std/cs/_std/Reflect.hx"
				return ( v is global::System.Enum );
			}
			else {
				#line 139 "/opt/haxe/std/cs/_std/Reflect.hx"
				return true;
			}
			
		}
		else {
			#line 139 "/opt/haxe/std/cs/_std/Reflect.hx"
			return false;
		}
		
	}
	#line default
	
	public static bool deleteField(object o, string field) {
		#line 143 "/opt/haxe/std/cs/_std/Reflect.hx"
		global::haxe.lang.DynamicObject ihx = ( o as global::haxe.lang.DynamicObject );
		if (( ihx != null )) {
			#line 145 "/opt/haxe/std/cs/_std/Reflect.hx"
			return ihx.__hx_deleteField(field, global::haxe.lang.FieldLookup.hash(field));
		}
		
		#line 146 "/opt/haxe/std/cs/_std/Reflect.hx"
		return false;
	}
	#line default
	
	public static global::haxe.lang.Null<T> copy<T>(global::haxe.lang.Null<T> o) {
		#line 150 "/opt/haxe/std/cs/_std/Reflect.hx"
		if ( ! (o.hasValue) ) {
			#line 151 "/opt/haxe/std/cs/_std/Reflect.hx"
			return default(global::haxe.lang.Null<T>);
		}
		
		#line 152 "/opt/haxe/std/cs/_std/Reflect.hx"
		object o2 = new global::haxe.lang.DynamicObject(new int[]{}, new object[]{}, new int[]{}, new double[]{});
		{
			#line 153 "/opt/haxe/std/cs/_std/Reflect.hx"
			int _g = 0;
			#line 153 "/opt/haxe/std/cs/_std/Reflect.hx"
			global::Array<string> _g1 = global::Reflect.fields((o).toDynamic());
			#line 153 "/opt/haxe/std/cs/_std/Reflect.hx"
			while (( _g < _g1.length )) {
				#line 153 "/opt/haxe/std/cs/_std/Reflect.hx"
				string f = _g1[_g];
				#line 153 "/opt/haxe/std/cs/_std/Reflect.hx"
				 ++ _g;
				global::Reflect.setField(o2, f, global::Reflect.field((o).toDynamic(), f));
			}
			
		}
		
		#line 155 "/opt/haxe/std/cs/_std/Reflect.hx"
		return global::haxe.lang.Null<object>.ofDynamic<T>(o2);
	}
	#line default
	
	public static object makeVarArgs(global::haxe.lang.Function f) {
		#line 160 "/opt/haxe/std/cs/_std/Reflect.hx"
		return new global::haxe.lang.VarArgsFunction(f);
	}
	#line default
	
}


