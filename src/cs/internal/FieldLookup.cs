// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.lang {
	public sealed class FieldHashConflict {
		
		public FieldHashConflict(int hash, string name, object @value, global::haxe.lang.FieldHashConflict next) {
			#line 34 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			this.hash = hash;
			this.name = name;
			#line 36 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			this.@value = @value;
			this.next = next;
		}
		#line default
		
		public readonly int hash;
		
		public readonly string name;
		
		public object @value;
		
		public global::haxe.lang.FieldHashConflict next;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace haxe.lang {
	public sealed class FieldLookup {
		
		#pragma warning disable 628
		static FieldLookup() {
			#line 50 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			global::haxe.lang.FieldLookup.length = ( global::haxe.lang.FieldLookup.fieldIds as global::System.Array ).Length;
		}
		#line default
		
		public FieldLookup() {
		}
		
		
		protected static int[] fieldIds = new int[]{98, 104, 105, 109, 113, 115, 23526, 23527, 1332402, 1821933, 4745537, 4846113, 4849249, 4899635, 4949376, 4995541, 4996429, 5046829, 5047484, 5049505, 5144726, 5145602, 5243965, 5246186, 5343647, 5393365, 5442204, 5442212, 5443986, 5594513, 5594516, 5741474, 5744817, 5745024, 5790526, 5841808, 5843823, 5991895, 10319920, 10663594, 22951110, 24046298, 25738091, 33061679, 42740551, 43737796, 46374763, 52644165, 57219237, 60289868, 63190583, 67856200, 67859554, 68006728, 72252782, 76061764, 78945784, 81457683, 87367608, 95523933, 96903864, 125111323, 132916898, 133414859, 142151465, 142301684, 142895325, 157772329, 159136996, 172955042, 179047623, 184980232, 188431961, 207609411, 208459108, 209784577, 212244564, 221637784, 222029606, 225347491, 226931207, 243225909, 244830897, 252173918, 252174139, 252174360, 252212074, 253048465, 261031087, 262801146, 263155582, 263824376, 281751194, 288167040, 305151978, 309502035, 311106773, 311106994, 312752480, 328878574, 329135072, 334695532, 336655392, 340222179, 343868310, 350619104, 350619108, 353204262, 358990357, 359333139, 360725482, 364006368, 365188593, 380244791, 388680308, 391262694, 391692349, 393324759, 400509660, 404153790, 407081669, 407283053, 437335495, 440931783, 446171152, 448402539, 451001976, 452737314, 454875113, 461513217, 480756972, 481768284, 493819893, 499574632, 501039929, 502768344, 502769015, 520590566, 520665567, 528448451, 529244784, 537630174, 542823803, 572311959, 589000550, 589252089, 589599061, 590345008, 591404329, 596483356, 598785079, 610723709, 614073432, 630156697, 634786275, 640252688, 641597244, 645255902, 650414942, 651890926, 652994848, 660670753, 664175990, 666925948, 688014215, 701410669, 703544457, 724060212, 727112898, 735461151, 742854407, 746281503, 756413782, 772311838, 772312059, 784433846, 790737991, 798803052, 822313068, 834174833, 841081396, 845179051, 858513194, 863972113, 878103594, 891567758, 907774356, 910198946, 922037898, 922671056, 930986349, 930987020, 937267591, 944645571, 946786476, 952878022, 995006396, 1016047850, 1029013645, 1042138122, 1058459579, 1058556349, 1066567601, 1066783641, 1067353468, 1071652316, 1091627025, 1092023741, 1092171829, 1102715038, 1103409453, 1103412149, 1113806378, 1113806382, 1116398082, 1120117490, 1125490259, 1126235833, 1126920507, 1136381564, 1136381571, 1137315269, 1139639992, 1149558607, 1154932936, 1155848147, 1156121931, 1158359328, 1158860648, 1169897582, 1169995914, 1170195731, 1171620962, 1177754921, 1181037546, 1191633396, 1191829406, 1196428959, 1202522710, 1202718727, 1203028895, 1204059472, 1204816148, 1208244040, 1212528822, 1213952397, 1214305123, 1214453688, 1224700491, 1224901644, 1224901875, 1225098545, 1227765365, 1230265810, 1233646036, 1238331169, 1238832007, 1242623863, 1247076770, 1247576961, 1247723251, 1247875546, 1257164128, 1257939113, 1269206179, 1269254998, 1269755426, 1271070480, 1273207865, 1274465926, 1280345464, 1280347464, 1280549057, 1280638028, 1280638699, 1280842308, 1280845662, 1282943179, 1291436593, 1302870512, 1309344294, 1311059210, 1312666830, 1313416818, 1315911912, 1328603456, 1337394146, 1348037855, 1352640099, 1352786672, 1371405953, 1381630732, 1390395051, 1390578741, 1390578962, 1390579183, 1392565074, 1395555037, 1400771174, 1406510796, 1441685007, 1450762973, 1460447810, 1460653781, 1484998194, 1488620307, 1489662016, 1503920168, 1532710347, 1533657591, 1537812987, 1549276146, 1554480847, 1560893070, 1576149820, 1601245343, 1609918451, 1614780307, 1620824029, 1621420777, 1623148745, 1639293562, 1648581351, 1651365158, 1661489734, 1691023565, 1693277929, 1705565617, 1705629508, 1723805383, 1747705375, 1748066140, 1757972228, 1763375486, 1768164316, 1769126865, 1789423016, 1794072594, 1795947670, 1797611211, 1815533258, 1825849507, 1828713895, 1830310359, 1836776262, 1836975402, 1837892969, 1840455391, 1855145886, 1873474154, 1878640711, 1879807530, 1886001471, 1887596712, 1889717695, 1891834246, 1898155939, 1915412854, 1916009602, 1920782701, 1932118984, 1937159360, 1970444429, 1981972957, 1987394228, 1988514268, 1993152491, 2003447495, 2005380545, 2010580328, 2012934199, 2022294396, 2025055113, 2025238049, 2029008698, 2048392659, 2054623939, 2079583163, 2081356408, 2082581827, 2082663554, 2083500811, 2103468489, 2113708439, 2123232567, 2127021138, 2143813817};
		
		protected static string[] fields = new string[]{"b", "h", "i", "m", "q", "s", "io", "ip", "get_position", "isGlobal", "__a", "add", "arr", "buf", "cur", "dev", "dir", "elt", "eof", "ext", "get", "gid", "idx", "ino", "key", "len", "map", "max", "min", "pop", "pos", "set", "str", "sub", "tbl", "uid", "url", "xml", "first", "postData", "setError", "split", "exitCode", "addInfo", "flags", "flush", "readAll", "match", "compare", "firstChild", "elements", "stack", "start", "stdin", "helper", "remove", "__previousException", "getResult", "filter", "decodeBytes", "merge", "hashCode", "stderr", "stdout", "classString", "resize", "result", "onError", "matched", "getFullYear", "readString", "accept", "getHours", "isEmpty", "parseString", "output", "newline", "__nativeException", "setLoop", "insertChild", "getString", "readBytes", "compareArg", "readInt16", "readInt24", "readInt32", "isEqual", "getUTCMinutes", "get_length", "mtime", "isError", "convertToMagLev", "setFloat", "stream", "hostEntry", "setDouble", "readUInt16", "readUInt24", "get_native", "iterator", "getBool", "indent", "toHex", "getCode", "dateUTC", "getData", "getDate", "set_position", "getUInt16", "lastIndexOf", "connect", "attributeMap", "getUTCSeconds", "readChunk", "nbits", "get_nodeValue", "writeFloat", "attributes", "totlen", "replacer", "hasName", "hasNext", "message", "fileTransfer", "positionAtLine", "accepts", "keysLoop", "reverse", "setPostBytes", "getName", "nOccupied", "parseNumber", "getBytes", "nlink", "insert", "getInt32", "getInt64", "length", "addSub", "getTime", "getType", "get_message", "bigEndian", "native", "getDay", "getInt", "getPid", "get_ip", "getMinutes", "balance", "previous", "writeFullBytes", "matchedRight", "array", "hasOnData", "writeString", "async", "initTable", "set_bigEndian", "atime", "invalidNumber", "chunk_buf", "get_nodeName", "getUTCDate", "encodeString", "invalidChar", "getSeconds", "replace", "details", "setTimeout", "readDouble", "contains", "emptyOnData", "writeUInt16", "writeUInt24", "pretty", "getDouble", "firstElement", "setPostData", "value", "rejects", "quotient", "maglev", "__nativeStack", "fieldsString", "addHeader", "convertToHaxe", "compareArgs", "addBytes", "cachedIndex", "addInt32", "addInt64", "prepare", "success", "toString", "setFastSend", "hashes", "set_nodeName", "param", "input", "addChild", "_eof", "custom", "__exceptionStack", "splice", "exists", "base", "bind", "blit", "call", "code", "copy", "data", "date", "elementsNamed", "isAsync", "emit", "hasChildren", "matchSub", "file", "fill", "responseHeaders", "removeChild", "request", "removeLoop", "minBinding", "responseData", "head", "host", "info", "ipad", "item", "getTimezoneOffset", "__skipStack", "join", "keys", "kill", "readHttpResponse", "last", "left", "get_stack", "writeDouble", "concat", "addParameter", "backslash", "clear", "mode", "close", "name", "newl", "next", "nind", "encodeBytes", "addString", "get_responseData", "writeBody", "writeByte", "setBlocking", "peer", "port", "prev", "push", "keyValueIterator", "position", "rdev", "read", "root", "matchedPos", "current", "__shiftStack", "seek", "send", "size", "setInt32", "setInt64", "sock", "sort", "quicksort", "tell", "ctime", "readFullBytes", "waitForRead", "getUTCDay", "vals", "writeInt8", "_listeners", "values", "write", "register", "spliceVoid", "writeNode", "writeBytes", "writeInput", "writeInt16", "writeInt24", "writeInt32", "getError", "cachedKey", "readFloat", "onBytes", "nodeValue", "parseRec", "__ownStack", "getStringMap", "getUTCMonth", "chunk_size", "get_previous", "objString", "concatNative", "noShutdown", "nBuckets", "set_nodeValue", "setHeader", "mimeType", "quote", "decodeString", "_methods", "offset", "__unsafe_get", "__unsafe_set", "indexOf", "lookup", "fileName", "getFloat", "headers", "fileTransfert", "onData", "onStatus", "toDynamic", "regex", "setResult", "onResult", "responseAsString", "readByte", "right", "getMessage", "canSeek", "addDouble", "shutdown", "getDefault", "getMonth", "unwrap", "setParameter", "customParams", "params", "parent", "nextChar", "readInt8", "customRequest", "readLine", "listen", "responseBytes", "children", "doParse", "get_canSeek", "_height", "others", "__get", "__set", "nodeName", "error", "__hx_deleteField", "ipAddress", "lineNumber", "cnxTimeout", "nodeType", "postBytes", "filename", "getUTCHours", "readUntil", "modulus", "upperBound", "unshift", "setUInt16", "getUTCFullYear", "_keys", "isComplete", "addFloat", "ensureElementType", "toJson", "shift", "matchedLeft", "addByte", "addChar", "removeMinBinding", "slice", "complete"};
		
		protected static int length;
		
		public static void addFields(int[] nids, string[] nfields) {
			unchecked {
				#line 55 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int[] cids = global::haxe.lang.FieldLookup.fieldIds;
				#line 55 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				string[] cfields = global::haxe.lang.FieldLookup.fields;
				int nlen = ( nids as global::System.Array ).Length;
				#line 57 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int clen = global::haxe.lang.FieldLookup.length;
				if (( ( nfields as global::System.Array ).Length != nlen )) {
					#line 59 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat(global::haxe.lang.Runtime.concat("Different fields length: ", global::haxe.lang.Runtime.toString(nlen)), " and "), global::haxe.lang.Runtime.toString(( nfields as global::System.Array ).Length)))) );
				}
				
				#line 62 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				bool needsChange = false;
				{
					#line 63 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int[] _g_arr = nids;
					#line 63 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					uint _g_idx = ((uint) (0) );
					#line 63 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					while (( _g_idx < ( _g_arr as global::System.Array ).Length )) {
						#line 63 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						_g_idx += ((uint) (1) );
						#line 63 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int i = _g_arr[((int) (((uint) (( _g_idx - 1 )) )) )];
						if (( global::haxe.lang.FieldLookup.findHash(i, cids, clen) < 0 )) {
							#line 65 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							needsChange = true;
							break;
						}
						
					}
					
				}
				
				#line 71 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (needsChange) {
					#line 72 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					lock(typeof(global::haxe.lang.FieldLookup)){
						#line 74 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int[] ansIds = new int[( clen + nlen )];
						#line 74 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						string[] ansFields = new string[( clen + nlen )];
						#line 76 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int ci = 0;
						#line 76 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int ni = 0;
						#line 76 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int ansi = 0;
						while (true) {
							#line 77 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							if ( ! ((( (( ci < clen )) ? (( ni < nlen )) : (false) ))) ) {
								#line 77 "/opt/haxe/std/cs/internal/FieldLookup.hx"
								break;
							}
							
							#line 78 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							if (( cids[ci] < nids[ni] )) {
								#line 79 "/opt/haxe/std/cs/internal/FieldLookup.hx"
								ansIds[ansi] = cids[ci];
								ansFields[ansi] = ((string) (cfields[ci]) );
								#line 81 "/opt/haxe/std/cs/internal/FieldLookup.hx"
								ci = ( ci + 1 );
							}
							else {
								#line 83 "/opt/haxe/std/cs/internal/FieldLookup.hx"
								ansIds[ansi] = nids[ni];
								ansFields[ansi] = ((string) (nfields[ni]) );
								#line 85 "/opt/haxe/std/cs/internal/FieldLookup.hx"
								ni = ( ni + 1 );
							}
							
							#line 87 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							ansi = ( ansi + 1 );
						}
						
						#line 90 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						if (( ci < clen )) {
							#line 91 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							global::System.Array.Copy(((global::System.Array) (cids) ), ((int) (ci) ), ((global::System.Array) (ansIds) ), ((int) (ansi) ), ((int) (( clen - ci )) ));
							global::System.Array.Copy(((global::System.Array) (cfields) ), ((int) (ci) ), ((global::System.Array) (ansFields) ), ((int) (ansi) ), ((int) (( clen - ci )) ));
							#line 93 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							ansi = ( ansi + (( clen - ci )) );
						}
						
						#line 96 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						if (( ni < nlen )) {
							#line 97 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							global::System.Array.Copy(((global::System.Array) (nids) ), ((int) (ni) ), ((global::System.Array) (ansIds) ), ((int) (ansi) ), ((int) (( nlen - ni )) ));
							global::System.Array.Copy(((global::System.Array) (nfields) ), ((int) (ni) ), ((global::System.Array) (ansFields) ), ((int) (ansi) ), ((int) (( nlen - ni )) ));
							#line 99 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							ansi = ( ansi + (( nlen - ni )) );
						}
						
						#line 103 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::haxe.lang.FieldLookup.fieldIds = ansIds;
						global::haxe.lang.FieldLookup.fields = ansFields;
						#line 105 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::haxe.lang.FieldLookup.length = ansi;
					}
					;
				}
				
			}
			#line default
		}
		
		
		public static int doHash(string s) {
			unchecked {
				#line 112 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int acc = 0;
				{
					#line 113 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int _g = 0;
					#line 113 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int _g1 = s.Length;
					#line 113 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					while (( _g < _g1 )) {
						#line 113 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int i = _g++;
						acc = ( ( ( 223 * (( acc >> 1 )) ) + ((int) (s[i]) ) ) << 1 );
					}
					
				}
				
				#line 117 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return ((int) (( ((uint) (acc) ) >> 1 )) );
			}
			#line default
		}
		
		
		public static string lookupHash(int key) {
			unchecked {
				#line 121 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int[] ids = global::haxe.lang.FieldLookup.fieldIds;
				int min = 0;
				#line 123 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int max = global::haxe.lang.FieldLookup.length;
				#line 125 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				while (( min < max )) {
					#line 126 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int mid = ( min + ( (( max - min )) / 2 ) );
					int imid = ids[mid];
					#line 128 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( key < imid )) {
						#line 129 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						max = mid;
					}
					else if (( key > imid )) {
						#line 131 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						min = ( mid + 1 );
					}
					else {
						#line 133 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						return ((string) (global::haxe.lang.FieldLookup.fields[mid]) );
					}
					
				}
				
				#line 137 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				throw ((global::System.Exception) (global::haxe.Exception.thrown(global::haxe.lang.Runtime.concat("Field not found for hash ", global::haxe.lang.Runtime.toString(key)))) );
			}
			#line default
		}
		
		
		public static int hash(string s) {
			unchecked {
				#line 141 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( s == null )) {
					#line 142 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					return 0;
				}
				
				#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int acc = 0;
				#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				{
					#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int _g = 0;
					#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int _g1 = s.Length;
					#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					while (( _g < _g1 )) {
						#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int i = _g++;
						#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						acc = ( ( ( 223 * (( acc >> 1 )) ) + ((int) (s[i]) ) ) << 1 );
					}
					
				}
				
				#line 144 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int key = ((int) (( ((uint) (acc) ) >> 1 )) );
				#line 146 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int[] ids = global::haxe.lang.FieldLookup.fieldIds;
				#line 146 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				string[] fld = global::haxe.lang.FieldLookup.fields;
				int min = 0;
				#line 148 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int max = global::haxe.lang.FieldLookup.length;
				#line 150 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int len = global::haxe.lang.FieldLookup.length;
				#line 152 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				while (( min < max )) {
					#line 153 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int mid = ((int) (( min + ( ((double) ((( max - min ))) ) / 2 ) )) );
					int imid = ids[mid];
					#line 155 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( key < imid )) {
						#line 156 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						max = mid;
					}
					else if (( key > imid )) {
						#line 158 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						min = ( mid + 1 );
					}
					else {
						#line 160 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						string field = ((string) (fld[mid]) );
						if (( field != s )) {
							#line 162 "/opt/haxe/std/cs/internal/FieldLookup.hx"
							return  ~ (key) ;
						}
						
						#line 163 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						return key;
					}
					
				}
				
				#line 169 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				lock(typeof(global::haxe.lang.FieldLookup)){
					#line 170 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( len != global::haxe.lang.FieldLookup.length )) {
						#line 171 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						return global::haxe.lang.FieldLookup.hash(s);
					}
					
					#line 173 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::haxe.lang.FieldLookup.fieldIds = global::haxe.lang.FieldLookup.insertInt(global::haxe.lang.FieldLookup.fieldIds, global::haxe.lang.FieldLookup.length, min, key);
					global::haxe.lang.FieldLookup.fields = global::haxe.lang.FieldLookup.insertString(global::haxe.lang.FieldLookup.fields, global::haxe.lang.FieldLookup.length, min, s);
					#line 175 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					 ++ global::haxe.lang.FieldLookup.length;
				}
				;
				#line 177 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return key;
			}
			#line default
		}
		
		
		public static int findHash(int hash, int[] hashs, int length) {
			unchecked {
				#line 181 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int min = 0;
				int max = length;
				#line 184 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				while (( min < max )) {
					#line 185 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int mid = ( (( max + min )) / 2 );
					int imid = hashs[mid];
					#line 187 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( hash < imid )) {
						#line 188 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						max = mid;
					}
					else if (( hash > imid )) {
						#line 190 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						min = ( mid + 1 );
					}
					else {
						#line 192 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						return mid;
					}
					
				}
				
				#line 196 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return  ~ (min) ;
			}
			#line default
		}
		
		
		public static void removeInt(int[] a, int length, int pos) {
			unchecked {
				#line 200 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				global::System.Array.Copy(((global::System.Array) (a) ), ((int) (( pos + 1 )) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
				a[( length - 1 )] = 0;
			}
			#line default
		}
		
		
		public static void removeFloat(double[] a, int length, int pos) {
			unchecked {
				#line 205 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				global::System.Array.Copy(((global::System.Array) (a) ), ((int) (( pos + 1 )) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
				a[( length - 1 )] = ((double) (0) );
			}
			#line default
		}
		
		
		public static void removeDynamic(object[] a, int length, int pos) {
			unchecked {
				#line 210 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				global::System.Array.Copy(((global::System.Array) (a) ), ((int) (( pos + 1 )) ), ((global::System.Array) (a) ), ((int) (pos) ), ((int) (( ( length - pos ) - 1 )) ));
				a[( length - 1 )] = null;
			}
			#line default
		}
		
		
		public static int[] insertInt(int[] a, int length, int pos, int x) {
			unchecked {
				#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int[] a1 = a;
				#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int capacity = ( a1 as global::System.Array ).Length;
				#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( pos == length )) {
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int[] newarr = new int[( (( length << 1 )) + 1 )];
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						int[] newarr1 = new int[( (( length << 1 )) + 1 )];
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr1;
					}
					else {
						#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					int[] newarr2 = new int[( (( length << 1 )) + 1 )];
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					a1 = newarr2;
				}
				else {
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				a1[pos] = x;
				#line 246 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return a1;
			}
			#line default
		}
		
		
		public static double[] insertFloat(double[] a, int length, int pos, double x) {
			unchecked {
				#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				double[] a1 = a;
				#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int capacity = ( a1 as global::System.Array ).Length;
				#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( pos == length )) {
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						double[] newarr = new double[( (( length << 1 )) + 1 )];
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						double[] newarr1 = new double[( (( length << 1 )) + 1 )];
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr1;
					}
					else {
						#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					double[] newarr2 = new double[( (( length << 1 )) + 1 )];
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					a1 = newarr2;
				}
				else {
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				a1[pos] = x;
				#line 249 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return a1;
			}
			#line default
		}
		
		
		public static object[] insertDynamic(object[] a, int length, int pos, object x) {
			unchecked {
				#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				object[] a1 = a;
				#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int capacity = ( a1 as global::System.Array ).Length;
				#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( pos == length )) {
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						object[] newarr = new object[( (( length << 1 )) + 1 )];
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						object[] newarr1 = new object[( (( length << 1 )) + 1 )];
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr1;
					}
					else {
						#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					object[] newarr2 = new object[( (( length << 1 )) + 1 )];
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					a1 = newarr2;
				}
				else {
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				a1[pos] = ((object) (x) );
				#line 252 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return a1;
			}
			#line default
		}
		
		
		public static string[] insertString(string[] a, int length, int pos, string x) {
			unchecked {
				#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				string[] a1 = a;
				#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				int capacity = ( a1 as global::System.Array ).Length;
				#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( pos == length )) {
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						string[] newarr = new string[( (( length << 1 )) + 1 )];
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						( a1 as global::System.Array ).CopyTo(((global::System.Array) (newarr) ), ((int) (0) ));
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr;
					}
					
				}
				else if (( pos == 0 )) {
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					if (( capacity == length )) {
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						string[] newarr1 = new string[( (( length << 1 )) + 1 )];
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr1) ), ((int) (1) ), ((int) (length) ));
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						a1 = newarr1;
					}
					else {
						#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
						global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (1) ), ((int) (length) ));
					}
					
				}
				else if (( capacity == length )) {
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					string[] newarr2 = new string[( (( length << 1 )) + 1 )];
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (newarr2) ), ((int) (0) ), ((int) (pos) ));
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (newarr2) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					a1 = newarr2;
				}
				else {
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (pos) ), ((global::System.Array) (a1) ), ((int) (( pos + 1 )) ), ((int) (( length - pos )) ));
					#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					global::System.Array.Copy(((global::System.Array) (a1) ), ((int) (0) ), ((global::System.Array) (a1) ), ((int) (0) ), ((int) (pos) ));
				}
				
				#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				a1[pos] = x;
				#line 255 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return a1;
			}
			#line default
		}
		
		
		public static global::haxe.lang.FieldHashConflict getHashConflict(global::haxe.lang.FieldHashConflict head, int hash, string name) {
			#line 258 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			while (( head != null )) {
				#line 259 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( ( head.hash == hash ) && ( head.name == name ) )) {
					#line 260 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					return head;
				}
				
				#line 262 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				head = head.next;
			}
			
			#line 264 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			return null;
		}
		#line default
		
		public static void setHashConflict(ref global::haxe.lang.FieldHashConflict head, int hash, string name, object @value) {
			#line 268 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			global::haxe.lang.FieldHashConflict node = head;
			while (( node != null )) {
				#line 270 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( ( node.hash == hash ) && ( node.name == name ) )) {
					#line 271 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					node.@value = @value;
					return;
				}
				
				#line 274 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				node = ((global::haxe.lang.FieldHashConflict) (node.next) );
			}
			
			#line 276 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			head = ((global::haxe.lang.FieldHashConflict) (new global::haxe.lang.FieldHashConflict(hash, name, @value, ((global::haxe.lang.FieldHashConflict) (head) ))) );
		}
		#line default
		
		public static bool deleteHashConflict(ref global::haxe.lang.FieldHashConflict head, int hash, string name) {
			#line 281 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			if (( head == null )) {
				#line 282 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				return false;
			}
			
			#line 286 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			if (( ( head.hash == hash ) && ( head.name == name ) )) {
				#line 287 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				head = ((global::haxe.lang.FieldHashConflict) (head.next) );
				return true;
			}
			
			#line 292 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			global::haxe.lang.FieldHashConflict prev = head;
			#line 292 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			global::haxe.lang.FieldHashConflict node = head.next;
			while (( node != null )) {
				#line 294 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				if (( ( node.hash == hash ) && ( node.name == name ) )) {
					#line 295 "/opt/haxe/std/cs/internal/FieldLookup.hx"
					prev.next = node.next;
					return true;
				}
				
				#line 298 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				node = node.next;
			}
			
			#line 302 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			return false;
		}
		#line default
		
		public static void addHashConflictNames(global::haxe.lang.FieldHashConflict head, global::Array<string> arr) {
			#line 306 "/opt/haxe/std/cs/internal/FieldLookup.hx"
			while (( head != null )) {
				#line 307 "/opt/haxe/std/cs/internal/FieldLookup.hx"
				arr.push(head.name);
				head = head.next;
			}
			
		}
		#line default
		
	}
}


